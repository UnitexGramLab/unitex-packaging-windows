# =============================================================================
# Unitex/GramLab Setup Installer for Windows
# =============================================================================
# Copyright (C) 2014-2015 Université Paris-Est Marne-la-Vallée <unitex@univ-mlv.fr>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#
# cristian.martinez@univ-paris-est.fr (martinec)
#
# =============================================================================
# This NSIS script is used to create the Unitex/GramLab setup installers
# for Windows on POSIX compliant systems. NSIS (Nullsoft Scriptable
# Install System) is a scripting tool to create Windows installers.
# Installers are generated by using the `makensis` program to compile a
# NSIS script (.nsi) into an executable. NSIS is released under an open
# source license and is completely free for any use. For more details,
# please visit http://nsis.sourceforge.net
#
# =============================================================================
# Script dependencies
# =============================================================================
#  - NSIS distribution (version >= 3.0)
#    Type `makensis -VERSION`. If you need an update version, please visit
#    http://nsis.sourceforge.net
#  - Inetc plug-in - Internet client plug-in for files download and upload.
#    http://nsis.sourceforge.net/Inetc_plug-in. To install, go to your nsis
#    folder (the directory containing Bin, Contrib, ... subfolders) and type:
#    `wget http://nsis.sourceforge.net/mediawiki/images/c/c9/Inetc.zip &&\
#    unzip Inetc.zip && rm Inetc.zip`
#  - GNU awk (version >= 3.0)
#    Type `awk --version`. If you need an update version, please visit
#    http://www.gnu.org/software/gawk/
#
# =============================================================================
# Script compilation
# =============================================================================
# Usage:
#  `makensis -DVER_MAJOR=# -DVER_MINOR=# -DVER_REVISION=# [OPTIONS] unitex.nsi`
#
# For a full list of compiler flags supported by this program, just type
# `makensis unitex.nsi` [return] at the command line. For a full list of
# parameters and further information about the makensis command, type
# `makensis` [return].
#
# Example 1.
#  How to make an installer using an Unitex/GramLab .zip package (anonymous build)
#
#  Before beginning, please remember that this program only compiles on
#  POSIX compliant systems (i.e. not on Windows). This is mainly due to the use
#  of the "!system" command thats runs with /bin/sh. There aren't any plans for
#  a Windows support at the moment.
#
#  Step 1. Download the bundle zip containing the Unitex/GramLab distribution
#          from the Unitex/GramLab homepage: http://www-igm.univ-mlv.fr/~unitex/
#
#  Step 2. Unzip all files in a folder at one time.
#
#  Step 3. Take notice of the main folder name:  
#          `Unitex${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}`, e.g.  
#          Unitex3.0      `VER_MAJOR=3 VER_MINOR=0 VER_SUFFIX=""`  
#          Unitex3.1beta  `VER_MAJOR=3 VER_MINOR=1 VER_SUFFIX="beta"`
#
#  Step 4. Take notice of the parent folder name, i.e. the directory where the
#          main Unitex directory is placed. This directory will be your
#          `${INPUT_BASEDIR}` path.
#
#  Step 5. Create the final setup installer typing:
#          `makensis -DANONYMOUS_BUILD  -DINPUT_BASEDIR=path -DVER_MAJOR=number
#                    -DVER_MINOR=number -DVER_SUFFIX=suffix unitex.nsi`
#
#          Example:
#
#          `makensis -DANONYMOUS_BUILD  -DINPUT_BASEDIR=. -DVER_MAJOR=3
#                    -DVER_MINOR=1 -DVER_SUFFIX=beta unitex.nsi`
#
#          This will create an executable named:
#          Unitex-GramLab-3.1beta_anonymous_win32-setup.exe
#
# Example 2.
#  How to make an installer for a stable release:
#
#  makensis -DINPUT_BASEDIR=. -DVER_MAJOR=3 -DVER_MINOR=0 -DVER_REVISION=3539
#            unitex.nsi
#
#  This will create an executable named:
#  Unitex-GramLab-3.0_win32-setup.exe
#
# Example 3.
#  How to make an installer for an unstable release:
#
#  makensis -DINPUT_BASEDIR=. -DVER_MAJOR=3 -DVER_MINOR=1 -DVER_REVISION=3539
#           -DVER_SUFFIX=beta unitex.nsi
#
#  This will create an executable named:
#  Unitex-GramLab-3.1beta_win32-setup.exe
#
# =============================================================================
# Setup installer command line parameters
# =============================================================================
# TODO(laporte) Append this to the Unitex/GramLab Manual
# The produced Unitex/GramLab Windows setup installer accepts several
# command line parameters. Some common options are :
#
# /AllUsers                    Set default to a per-machine installation
#
# /CurrentUser                 Set default to a per-user installation
#
# /D C:\path\without quotes\   Sets the default installation directory. It must
#                              be the last parameter and must not contain any
#                              quotes. Only absolute paths are supported
#
# /NCRC                        The installer will not perform a Cyclic Redundancy
#                              Check (CRC) on itself before allowing an install
#
# /S                           Runs the installer or the uninstaller silently
#
# =============================================================================
# Setup installer features
# =============================================================================
# - User selection of Unitex/GramLab installation components (Core Components,
#   Visual IDEs, Language Resources, Source Code, User Manual, Start Menu
#   and Desktop Shortcuts).
# - Several installation types : Full, Standard, Minimal and Custom.
# - Automatic JRE (Java Runtime Edition) detection. If the JRE isn't installed,
#   a dialog allows the user to choose between a manual or automatic install.
# - System language detection to preselect Language Resources to install.
# - Same, older or newer version detection.
# - Application, Manual, and Web links shortcuts.
# - Admin or user installation mode support.
# - Mixed-mode installer that can both be installed per-machine or per-user.
# - Silent mode support for batch installs.
# - Uninstall support.
#
# =============================================================================
# Script processing
# =============================================================================
# `makensis` read unitex.nsi and try to build a windows setup installer named
# Unitex-GramLab-${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}_win${BITS}-setup.exe.
# A flag named INPUT_BASEDIR, specifies the root build directory containing the
# files to be packaged. If not specified, the current working directory is used.
#
# A typical Unitex/GramLab build directory is shown in the next figure:
#
# ${INPUT_BASEDIR}
# ├───/checkout     (*)
# ├───/Unitex${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}
# │    ├───/App
# │    ├───/Src
# │    ├───/Users
# │    ├───/XAlign
# │    └───/...     (+)
# └───/UnitexManual (*)
#
# (*) Only required for non-anonymous builds.
# (+) Language resources, a separate directory for each language. e.g.
#     'Spanish', 'French, 'English', 'Greek (Modern)', ...
#
# All Unitex/GramLab build subdirectories (except those marked by an asterisk)
# can be downloaded as a bundle in zip format from the Unitex/GramLab homepage
# at http://www-igm.univ-mlv.fr/~unitex/
#
# =============================================================================
# Setup installer runtime control flow
# =============================================================================
# - Process include files
# - Declare constants, attributes and variables
# - Run the (un).onInit function
# - Run all pages (top-down)
# - Execute all sections (top-down)
#
# =============================================================================
# NSIS scripts structure
# =============================================================================
# - Definitions
# - Pages
# - Languages
# - Additional Installer Attributes
# - Installer Sections
# - Uninstaller Functions
# - Uninstaller Section
#
# =============================================================================
# Script compilation features
#
# - Debug mode compilation.
# - Stable or unstable builds compilation.
# - Anonymous or svn builds compilation.
# - Automatic detection of new languages directories.
# - Automatic updated the JRE download link.
# - MD5 and SHA1 installer signature file generation.
# - More, type `makensis unitex.nsi` [return] for a full list of compiler flags.
#
# =============================================================================
# When this script should be modified or updated ?
# =============================================================================
# New Core files              (/App)          ? Yes. (see 'CoreSection')
# New Manual translation      (/UnitexManual) ? Yes. (see 'ManSection')
# New Source files            (/Src)          ? No.  (automatically updated)
# New directory language      (/LANG_NAME)    ? No.  (automatically detected)
# New language resources      (/LANG_NAME/*)  ? No.  (automatically added)
#
# =============================================================================
# Code maintenance
# =============================================================================
# Comments
#  use ; for code comments
#  use # for text comments
#
# =============================================================================
# Future features and enhancements
# =============================================================================
# - Add support for a web installation mode.
# - Use components timestamp (registry key 'LastChanged') to check for updates.
# - Localize the installer user interface (i18n folder).
# - Include support for creating pure 64-bit Windows installers.
#
# =============================================================================

# =============================================================================
# Active support for unicode installers
# use makensis -DSETUP_NO_UNICODE
# =============================================================================
!ifndef SETUP_NO_UNICODE
  Unicode true
!endif  # SETUP_NO_UNICODE

# =============================================================================
# Declare installer compatibility
# This adds a SupportedOS entry in the compatibility section of the application
# manifest. Be aware that Windows XP and Windows Vista ignore this manifest
# section and it has no impact on them.
# =============================================================================
ManifestSupportedOS all

# =============================================================================
# Debug Mode settings
# use makensis -DDEBUG_MODE ...
# =============================================================================
!ifdef DEBUG_MODE
  # Omit the Sources Section
  !define /ifndef SETUP_NO_SOURCES_SECTION

  # Omit the Manual Section
  !define /ifndef SETUP_NO_MANUAL_SECTION

  # set the StrFunc library verbosity to  4 (all)
  !define /ifndef  STRFUNC_VERBOSITY   4

  # set the LogicLib library verbosity to 4 (all)
  !define /ifndef  LOGICLIB_VERBOSITY  4
!else  # Release mode
  # set the StrFunc library verbosity to  3 (no script)
  !define /ifndef  STRFUNC_VERBOSITY   3

  # set the LogicLib library verbosity to 3 (no script)
  !define /ifndef  LOGICLIB_VERBOSITY  3
!endif  # DEBUG_MODE

# =============================================================================
# Anonymous Builds settings
# use makensis -DANONYMOUS_BUILD ...
# =============================================================================
!ifdef ANONYMOUS_BUILD
  # Write the final installer in the current directory
  !define /ifndef OUTPUT_SETUP_DIR   "."

  # Don't calculate the MD5 signature of the final installer
  !define /ifndef FINALIZE_NO_MD5SUM_FILE

  # Don't calculate the SHA1 signature of the final installer
  !define /ifndef FINALIZE_NO_SHA1SUM_FILE

  # Always omit the Manual Section
  !define /ifndef SETUP_NO_MANUAL_SECTION

  # Always omit to store in the registry the Last Changed Date information
  # available in the checkout directory (checkout/*.last)
  !define /ifndef SETUP_NO_CHECKOUT_INFO
!endif # ANONYMOUS_BUILD

# =============================================================================
# Compression settings
# =============================================================================
!ifdef DEBUG_MODE
  # Compression is not used when DEBUG_MODE flag is passed. This speed up the
  # compilation process.
  SetCompress off
!else
  # Set the compress flag which is used by the installer to determine whether
  # or not data should be compressed to auto, i.e. files are compressed if the
  # compressed size is smaller than the uncompressed size
  SetCompress auto

  # LZMA is a compression method that gives very good compression ratios.
  # /FINAL : subsequent calls to SetCompressor directive will be ignored.
  # /SOLID : all of the installer data is compressed in one block.
  # See ReserveFile function to know the implications of use the /Solid flag.
  SetCompressor /FINAL /SOLID LZMA

  # Compression Level will ignored if LZMA compression method is selected, i.e.
  # only works for zlib and bzip2
  ;SetCompressionLevel 9

  # Change the dictionary size of 8 MB used by the LZMA compressor to 32 MB.
  SetCompressorDictSize 32

  # Tells the compiler to do datablock optimizations
  SetDatablockOptimize on
!endif

# =============================================================================
# A list of compiler flags supported by this script
# =============================================================================
!define OPTIONS_SPACE     "  "
!define DESCRIPTION_SPACE "${OPTIONS_SPACE} "
!define NEW_LINE          "$\n"
!define SETUP_USAGE       "\
    Usage:${NEW_LINE}  \
    makensis -DVER_MAJOR=value -DVER_MINOR=value \
   -DVER_REVISION=value [OTHER_OPTIONS] unitex_setup.nsi${NEW_LINE}${NEW_LINE}\
    Options:${NEW_LINE}  \
   -DANONYMOUS_BUILD${NEW_LINE}${OPTIONS_SPACE}\
   -DDEBUG_MODE${NEW_LINE}${OPTIONS_SPACE}\
   -DFINALIZE_NO_MD5SUM_FILE${NEW_LINE}${OPTIONS_SPACE}\
   -DFINALIZE_UPDATE_LATEST_LINK${NEW_LINE}${OPTIONS_SPACE}\
   -DFINALIZE_SHA1SUM_FILE${NEW_LINE}${OPTIONS_SPACE}\
   -DFORCE_JRE_SILENT_INSTALL${NEW_LINE}${OPTIONS_SPACE}\
   -DFORCE_JRE_UPDATE_INSTALLER_LINK${NEW_LINE}${OPTIONS_SPACE}\
   -DINPUT_BASEDIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DINPUT_CHKDIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DINPUT_MANDIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DINPUT_UNITEXDIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DINPUT_XALIGNDIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DOUTPUT_SETUP_DIR=path${NEW_LINE}${OPTIONS_SPACE}\
   -DOUTPUT_SETUP_NAME=name${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_BUILD_DATE=%Y-%m-%d %H:%M:%S${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_CHECKOUT_FILE${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_HAVE_UPX${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_NO_COMPILE_CHECKS${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_NO_INSTTYPES${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_NO_SOURCES_SECTION${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_NO_UNICODE${NEW_LINE}${OPTIONS_SPACE}\
   -DSETUP_SHOW_SPLASH_SCREEN${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_ANONYMOUS_SUFFIX=suffix${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_ARCH_64${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_CURRENTYEAR=value${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_MAJOR=value${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_MINOR=value${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_REVISION=value${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_SUFFIX=suffix${NEW_LINE}${OPTIONS_SPACE}\
   -DVER_UNSTABLE${NEW_LINE}${OPTIONS_SPACE}\
    "
# =============================================================================
# Version customization
# =============================================================================
# These arguments must be passed through the command line
# use makensis -DVER_MAJOR=number -DVER_MINOR=number
# =============================================================================
!ifndef VER_MAJOR
  !error "VER_MAJOR must be defined!${NEW_LINE}${NEW_LINE}${SETUP_USAGE}"
!endif # VER_MAJOR

!ifndef VER_MINOR
  !error "VER_MINOR must be defined!${NEW_LINE}${SETUP_USAGE}"
!endif # VER_MINOR

# =============================================================================
# Anonymous builds version customization
# For a non-anonymous build you must provide a revision number:
# use makensis -DVER_MAJOR=number -DVER_MINOR=number -DVER_REVISION=number
# =============================================================================
!ifdef ANONYMOUS_BUILD
  !ifdef VER_REVISION
    !error "An anonymous build doesn't have a revision number!${NEW_LINE}"
  !else # VER_REVISION
    !define VER_REVISION    "unknown"
  !endif  # VER_REVISION

  !ifndef VERSION
    !define VERSION "${VER_MAJOR}.${VER_MINOR}"
  !endif  # VERSION

  !define /ifndef VER_ANONYMOUS_SUFFIX "anonymous-build"
!else #  ANONYMOUS_BUILD
  !ifndef VER_REVISION
    !error "VER_REVISION must be defined!${NEW_LINE}${SETUP_USAGE}"
  !endif # VER_REVISION

  !ifndef VERSION
    !define VERSION "${VER_MAJOR}.${VER_MINOR}.${VER_REVISION}"
  !endif # VERSION

  !define VER_ANONYMOUS_SUFFIX ""
!endif # ANONYMOUS_BUILD

# =============================================================================
# Current year used in Copyright information
# use makensis -DVER_CURRENTYEAR=2014 to overwrite it
!ifndef VER_CURRENTYEAR
  !define /date VER_CURRENTYEAR "%Y"
!endif  # VER_CURRENTYEAR

# =============================================================================
# Current build date
# use makensis -DSETUP_BUILD_DATE="2014-01-01 22:51:01" to overwrite it
!ifndef SETUP_BUILD_DATE
  !define /date SETUP_BUILD_DATE "%Y-%m-%d %H:%M:%S"
!endif  # SETUP_BUILD_DATE

# =============================================================================
# Only unstable versions have a name suffix!
!ifdef VER_SUFFIX
 !define /ifndef VER_UNSTABLE
!endif  # VER_SUFFIX

# =============================================================================
# Setup stable/unstable version
# use makensis -DVER_UNSTABLE
# =============================================================================
!ifdef VER_UNSTABLE
  # unstable version (with a name suffix, e.g : "alpha", "beta" or "rc")
  !ifndef VER_SUFFIX
    # "beta" is the default unstable suffix
    !define VER_SUFFIX "beta"
  !else  # VER_SUFFIX
    # if VER_SUFFIX argument was passed through the command line,
    # try to replace all spaces by underscores
    !searchreplace VER_SUFFIX "${VER_SUFFIX}" " " "_"
  !endif # VER_SUFFIX
!else  # stable version (without a name suffix)
  !ifndef VER_SUFFIX
    # if the version is stable don't use a suffix at all
    !define VER_SUFFIX ""
  !else  #  VER_SUFFIX
    !error "A stable version doesn't have a version suffix!${NEW_LINE}"
  !endif  # VER_SUFFIX
!endif  #  VER_UNSTABLE

# =============================================================================
# Architecture
# use makensis -DVER_ARCH_64
# =============================================================================
!ifdef VER_ARCH_64
  !define BITS 64
  !define  /ifndef NAME_SUFFIX " (64-bit)"
!else #  32-bit arch
  !define BITS 32
  !define  /ifndef NAME_SUFFIX ""
!endif  #  VER_ARCH_64

# =============================================================================
# @ Definitions
# =============================================================================
!define APPNAME          "Unitex-GramLab"
!define PRETTYAPPNAME    "Unitex/GramLab"
!define COMPANYNAME      "Université Paris-Est Marne-la-Vallée"
!define SHORTDESCRIPTION "corpus processing suite"
!define DESCRIPTION      "the next-generation, open source, cross-platform, \
                          multilingual, lexicon- and grammar-based ${SHORTDESCRIPTION}"

# Customize pretty version and pretty caption strings
!ifdef VER_UNSTABLE
  # Unstable PRETTYVERSION
  !ifndef PRETTYVERSION
    !ifndef ANONYMOUS_BUILD
      !define PRETTYVERSION  "${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}"
    !else  # PRETTYVERSION
      !define PRETTYVERSION  "${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX} \
                              (${VER_ANONYMOUS_SUFFIX})"
    !endif  # ANONYMOUS_BUILD
  !endif  # PRETTYVERSION

  # Unstable PRETTYAPPCAPTION
  !ifndef PRETTYAPPCAPTION
    !define PRETTYAPPCAPTION "${PRETTYAPPNAME} ${PRETTYVERSION} \
                              Rev. ${VER_REVISION}${NAME_SUFFIX}"
  !endif  # PRETTYAPPCAPTION
!else  # Version is stable
  # Stable PRETTYVERSION
  !ifndef PRETTYVERSION
    !ifndef ANONYMOUS_BUILD
      !define PRETTYVERSION  "${VER_MAJOR}.${VER_MINOR}"
    !else   # an anonymous build
      !define PRETTYVERSION  "${VER_MAJOR}.${VER_MINOR} (${VER_ANONYMOUS_SUFFIX})"
    !endif  # ANONYMOUS_BUILD
  !endif  # PRETTYVERSION

  # Stable PRETTYAPPCAPTION
  !ifndef PRETTYAPPCAPTION
    !define PRETTYAPPCAPTION "${PRETTYAPPNAME} ${PRETTYVERSION}${NAME_SUFFIX}"
  !endif  # PRETTYAPPCAPTION
!endif  #  VER_UNSTABLE

# =============================================================================
# Directories containing the files to be packaged
# =============================================================================
# ${INPUT_BASEDIR}
# ├───/checkout     (*)
# ├───/Unitex${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}
# │    ├───/App
# │    ├───/Src
# │    ├───/Users
# │    ├───/XAlign
# │    └───/...     (+)
# └───/UnitexManual (*)
#
# (*) Only required for non-anonymous builds.
# (+) Language resources, a separate directory for each language. e.g.
#     'Spanish', 'French, 'English', 'Greek (Modern)', .

# Basedir (root build directory) where all files are stored
!define /ifndef INPUT_BASEDIR      "."

# Unitex/GramLab CheckOut directory, only available in non-anonymous builds
!define  CHK_DIRNAME               "checkout"
!define /ifndef INPUT_CHKDIR       "${INPUT_BASEDIR}/${CHK_DIRNAME}"

# Unitex/GramLab root directory
# This is the folder where /App, /Src, /Users /XAlign
# and the language resources directories are located
!define /ifndef INPUT_UNITEXDIR    "${INPUT_BASEDIR}/Unitex\
                                    ${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX}"

# Unitex/GramLab /App path
!define  APP_DIRNAME                "App"
!define /ifndef INPUT_APPDIR        "${INPUT_UNITEXDIR}/${APP_DIRNAME}"

# Unitex/GramLab Manual directory
!define  MAN_DIRNAME                "manual"
!define /ifndef INPUT_MANDIR        "${INPUT_APPDIR}/${MAN_DIRNAME}"

# Unitex/GramLab /Src path
!define  SRC_DIRNAME                "Src"
!define /ifndef INPUT_SRCDIR        "${INPUT_UNITEXDIR}/${SRC_DIRNAME}"

# Unitex/GramLab /Users path
!define  USR_DIRNAME                "Users"
!define /ifndef INPUT_USRDIR        "${INPUT_UNITEXDIR}/${USR_DIRNAME}"

# Unitex/GramLab /XAlign path
!define  XALIGN_DIRNAME             "XAlign"
!define /ifndef INPUT_XALIGNDIR     "${INPUT_UNITEXDIR}/${XALIGN_DIRNAME}"

# =============================================================================
# Compile-time file test macros
# TestFile _ERROR_MESSAGE _FILE_TEST_OPERATOR _FILE_NAME
# CheckIfFileExist _FILE_NAME
# CheckIfDirExist  _FILE_NAME
# =============================================================================
# Enabled compile-time file test operations (only POSIX systems)
# For a full list of file test flags @see http://tldp.org/LDP/abs/html/fto.html
# This code is partially based in the 'defineifexist' function
# @see http://nsis.sourceforge.net/Check_if_a_file_exists_at_compile_time
!macro TestFile _ERROR_MESSAGE _FILE_TEST_OPERATOR _FILE_NAME
  !tempfile _TEMPFILE
  !system 'if [ ${_FILE_TEST_OPERATOR} "${_FILE_NAME}" ]; then echo "!error $\' \
           [${_FILE_NAME}] ${_ERROR_MESSAGE}$\'" > "${_TEMPFILE}"; fi'
  !include '${_TEMPFILE}'
  !delfile '${_TEMPFILE}'
  !undef _TEMPFILE
!macroend

!define CheckIfFileExist "!insertmacro TestFile 'File does not exists !' '! -e'"
!define CheckIfDirExist  "!insertmacro TestFile 'Directory does not exists !' '! -d'"

# =============================================================================
# Setup compile-time directory existence check
# Disable using makensis -DSETUP_NO_COMPILE_CHECKS
# =============================================================================
!ifndef SETUP_NO_COMPILE_CHECKS
  # Check if Unitex/GramLab directories exists before continue

  # /Unitex${VER_MAJOR}.${VER_MINOR}${VER_SUFFIX} directory
  ${CheckIfDirExist}    "${INPUT_UNITEXDIR}"

  # Application (Unitex/App) directory
  ${CheckIfDirExist}    "${INPUT_APPDIR}"

  # Users workspace (Unitex/Users) directory
  ${CheckIfDirExist}    "${INPUT_USRDIR}"

  # Code Source (Unitex/Src) directory for Core Components (C++),
  # Unitex Java IDE and GramLab Java IDE
  !ifndef SETUP_NO_SOURCES_SECTION
    ${CheckIfDirExist}  "${INPUT_SRCDIR}"
  !endif

  # XAlign  (Unitex/XAlign) directory
  ${CheckIfDirExist}    "${INPUT_XALIGNDIR}"

  # Test if at least English language resources are present,
  # other resources are automatically detected and further checked
  # and processed
  ${CheckIfDirExist}    "${INPUT_UNITEXDIR}/English"

  # Unitex/GramLab Manual directory (Unitex/App/manual)
  # -DANONYMOUS_BUILD flag defines -DSETUP_NO_MANUAL_SECTION
  !ifndef SETUP_NO_MANUAL_SECTION
    ${CheckIfDirExist}  "${INPUT_MANDIR}"
  !endif  # SETUP_NO_MANUAL_SECTION

  # Unitex/GramLab CheckOut directory (./checkout) contains timestamp
  # .last-files with the Last Changed Date of an Unitex/GramLab component.
  # Timestamp format is "%Y-%m-%d %H:%M:%S" as showed by the "svn info"
  # command. This directory is only present in non-anonymous builds,
  # -DANONYMOUS_BUILD flag defines -DSETUP_NO_CHECKOUT_INFO
  !ifndef SETUP_NO_CHECKOUT_INFO
    # checkout/*.last
    ${CheckIfDirExist}  "${INPUT_CHKDIR}"
  !endif
!endif  # SETUP_DISABLE_FILE_CHECKS

# =============================================================================
# Setup installer output directory
# =============================================================================
!ifndef ANONYMOUS_BUILD
  # ./releases
  !define /ifndef OUTPUT_RELEASES_DIR     "${INPUT_BASEDIR}/releases"

  # ./releases/3.0/
  # ./releases/3.1beta/
  !define /ifndef OUTPUT_THIS_RELEASE_DIR "${OUTPUT_RELEASES_DIR}/${VER_MAJOR}.\
                                           ${VER_MINOR}${VER_SUFFIX}"
  # ./releases/3.0/win32
  # ./releases/3.1beta/win32
  !define /ifndef OUTPUT_SETUP_DIR        "${OUTPUT_THIS_RELEASE_DIR}/win${BITS}"
!else
  # ./
  !define /ifndef OUTPUT_RELEASES_DIR     "."
  !define /ifndef OUTPUT_THIS_RELEASE_DIR "${OUTPUT_RELEASES_DIR}"
  !define /ifndef OUTPUT_SETUP_DIR        "${OUTPUT_THIS_RELEASE_DIR}"
!endif  # ANONYMOUS_BUILD

# =============================================================================
# Setup installer name
# =============================================================================
!ifndef OUTPUT_SETUP_NAME
  !ifndef ANONYMOUS_BUILD
    !define OUTPUT_SETUP_NAME "${APPNAME}-${VER_MAJOR}.${VER_MINOR}\
                               ${VER_SUFFIX}_win${BITS}-setup.exe"
  !else  # anonymous build
    !define OUTPUT_SETUP_NAME "${APPNAME}-${VER_MAJOR}.${VER_MINOR}\
                               ${VER_SUFFIX}_anonymous_win${BITS}-setup.exe"
  !endif  # ANONYMOUS_BUILD

  # if VER_SUFFIX is empty replace the double underscore with a
  # single-underscore
  !searchreplace OUTPUT_SETUP_NAME "${OUTPUT_SETUP_NAME}" __ _
!endif  # OUTPUT_SETUP_NAME

# =============================================================================
# Setup installer file (output directory + installer name)
# =============================================================================
!define  /ifndef  OUTPUT_SETUP_FILE "${OUTPUT_SETUP_DIR}/${OUTPUT_SETUP_NAME}"

# =============================================================================
# Setup uninstaller name
# =============================================================================
# Name of the uninstaller executable
!define UNINSTALLER_FILE "uninstall.exe"

# =============================================================================
# Shortcuts definitions
# =============================================================================
# Default start menu folder name
!define STARTMENUFOLDER    "${APPNAME}"

# Shortcuts names
!define UNITEX_JAVA_NAME   "Unitex Visual IDE"
!define GRAMLAB_JAVA_NAME  "GramLab Visual IDE"

# Name of the final uninstaller used in shortcut
!define UNINSTALLER_NAME   "Uninstall"

# =============================================================================
# Unitex/GramLab setup files
# These files must be inside the ${INPUT_APPDIR} directory
# =============================================================================
!define ICON_FILE          "Unitex.ico"  # Unitex/GramLab icon file
!define UNITEX_JAVA_FILE   "Unitex.jar"  # Unitex Java IDE executable
!define GRAMLAB_JAVA_FILE  "Gramlab.jar" # GramLab Java IDE executable
!define LGPL_FILE          "LGPL.txt"    # Lesser General Public License (LGPL)
!define LGPLLR_FILE        "LGPLLR.txt"  # LGPL for Linguistic Resources (LGPL-LR)

# Check Unitex/GramLab setup files. Other Files included with the 'File'
# command are automatically tested at compile time, this is why there are
# not checked here
!ifndef SETUP_NO_COMPILE_CHECKS
  ${CheckIfFileExist} "${INPUT_APPDIR}/${ICON_FILE}"
  ${CheckIfFileExist} "${INPUT_APPDIR}/${LGPL_FILE}"
  ${CheckIfFileExist} "${INPUT_APPDIR}/${LGPLLR_FILE}"
!endif  # SETUP_DISABLE_FILE_CHECKS

# =============================================================================
# Unitex/GramLab workspace directories and configuration files
!define UNITEX_WORKSPACE_NAME   "Unitex"      # Unitex workspace directory name
!define UNITEX_WORKSPACE_FILE   ".unitex.cfg" # Unitex workspace config file
!define GRAMLAB_WORKSPACE_NAME  "GramLab"     # GramLab workspace directory name
!define GRAMLAB_WORKSPACE_FILE  ".gramlab"    # GramLab workspace config file

# =============================================================================
# Unitex/GramLab related URLs
# =============================================================================
!define HOMEPAGE_URL  "http://unitexgramlab.org"
!define ABOUT_URL     "${HOMEPAGE_URL}/index.php?page=1"
!define UPDATE_URL    "${HOMEPAGE_URL}/index.php?page=3"
!define BUG_URL       "${HOMEPAGE_URL}/index.php?page=6"
!define LGPLLR_URL    "http://bit.do/LGPL-LR"
!define LGPL_URL      "http://www.gnu.org/licenses/lgpl.html"
!define FORUM_URL     "http://forum.unitexgramlab.org"

# =============================================================================
# Windows registry keys
# =============================================================================
# Application registry root key
# Software\Unitex-GramLab
!define APP_REGISTRY_KEY      "Software\${APPNAME}"

# Application registry installer key
# Software\Unitex-GramLab\installer
!define INSTALL_SETTINGS_KEY  "${APP_REGISTRY_KEY}\Installer"

# Application registry installer memento key
# Software\Unitex-GramLab\installer\memento
!define INSTALL_MEMENTO_KEY   "${INSTALL_SETTINGS_KEY}\Memento"

# Application registry BuilDate value name
!define INSTALL_BUILD_DATE_REGISTRY_VALUENAME "LastChanged"

# Core Components sub-key
# Software\Unitex-GramLab\CoreComponents
!define APP_CORE_KEY          "${APP_REGISTRY_KEY}\CoreComponents"

# Language Resources sub-key
# Software\Unitex-GramLab\LanguageResources
!define APP_LANGRES_KEY       "${APP_REGISTRY_KEY}\LanguageResources"

# Third Party sub-key
# Software\Unitex-GramLab\ThirdParty
!define APP_THIRDPARTY_KEY    "${APP_REGISTRY_KEY}\ThirdParty"

# User Manuals sub-key
# Software\Unitex-GramLab\UserManuals
!define APP_MAN_KEY           "${APP_REGISTRY_KEY}\UserManuals"

# Visual IDEs sub-key
# Software\Unitex-GramLab\VisualIntegratedEnvironments
!define APP_IDE_KEY           "${APP_REGISTRY_KEY}\VisualIntegratedEnvironments"

# Windows unistall key UUID
!define UNINSTALL_KEY_UUID    "{E55EFA6F-09C4-4780-BFAB-B190984B4EEA}"

# Windows unistall key
!define UNINSTALL_SETTINGS_KEY "Software\Microsoft\Windows\CurrentVersion\\
                                Uninstall\${UNINSTALL_KEY_UUID}"

# The registry key to store setup language information
!define MUI_LANGDLL_REGISTRY_ROOT      SHCTX
!define MUI_LANGDLL_REGISTRY_KEY       "${INSTALL_SETTINGS_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "InstallLanguage"

# =============================================================================
# Setup installation types to perform
# =============================================================================
!ifndef SETUP_NO_INSTTYPES
  # Full     : All components including user manuals
  InstType "Full"               # 1
  # Standard : Without source code
  InstType "Standard"           # 2
  # Minimal  : Only English language resources and user manual
  InstType "Minimal"            # 3
!endif

# The install window won't close automatically when completed
AutoCloseWindow false

# Show the "show details" box when install
ShowInstDetails show

# Hide the "show details" box when uninstall
ShowUninstDetails hide

# =============================================================================
# @ Includes
# =============================================================================

# Add ./include directory to the include directories list. This list is searched
# when !include is used.
!AddIncludeDir "./include"

# Defines the execution Level to Highest : Request the highest possible execution
# level for the current user
!define MULTIUSER_EXECUTIONLEVEL Highest

# Set default to a per-user installation, even if the rights for a per-machine
# installation are available.
!define MULTIUSER_INSTALLMODE_DEFAULT_CURRENTUSER

# Enabled MULTIUSER_PAGE_INSTALLMODE MUI2 Page macro
!define MULTIUSER_MUI

# Enables the installation mode (per-user or per-machine) to be set using the
# /AllUsers or /CurrentUser command line parameters
!define MULTIUSER_INSTALLMODE_COMMANDLINE

# Non-empty registry key that is created during the installation in either
# HKCU or HKLM. The default installation mode will automatically be set to
# the previously selected mode depending on the location of the key.
!define MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_KEY       "${INSTALL_SETTINGS_KEY}"
!define MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_VALUENAME "InstallMode"

# Registry key from which to obtain a previously stored installation folder.
# It will be retrieved from HKCU for per-user and HKLM for per-machine.
!define MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_KEY       "${INSTALL_SETTINGS_KEY}"
!define MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_VALUENAME "InstallDirectory"

# Name of the folder in which to install the application, without a path. This
# folder will be located in Program Files for a per-machine installation and in
# the local Application Data folder for a per-user installation (if supported).
!define MULTIUSER_INSTALLMODE_INSTDIR "${APPNAME}"

!include "StrFunc.nsh"    # StrFunc
!include "MultiUser.nsh"  # MultiUser
!include "MUI2.nsh"       # Modern UI
!include "Sections.nsh"   # Sections
!include "LogicLib.nsh"   # Logic

;Memento Settings
!define MEMENTO_REGISTRY_ROOT SHCTX
!define MEMENTO_REGISTRY_KEY "${INSTALL_MEMENTO_KEY}"
!include "Memento.nsh"    # Memento

# global variables

# This global variable holds the path where javaw executable is installed
# javaw.exe is identical to java.exe, except that with javaw.exe there is no
# associated console window
Var java_bin_path

# This  global variable
Var GetInstalledSize.total

# Language name directly related to an Unitex/GramLab directory name.
# see GetLocaleLanguageName function for more details
Var locale_language_code

# ISO 639-1 language code (excepting : no_ny, pt_br, sr_la)
# see GetLocaleLanguageName function for more details
Var locale_language_name

# NSIS integer Language ID
# see GetLocaleLanguageName function for more details
Var locale_language_id

# Minimal JRE version requested
!define JRE_VERSION       "1.7"

# URL to manually download the JRE
!define JRE_DOWNLOAD      "http://www.java.com/getjava"

# JRE bundles URL prefix
!define /ifndef JRE_INSTALLER_URL_PREFIX "http://javadl.sun.com/webapps/\
                                          download/AutoDL?BundleId"

# =============================================================================
# Compile-time JRE installer link updater
# use makensis -DFORCE_JRE_UPDATE_INSTALLER_LINK to force updated
# =============================================================================
!ifdef FORCE_JRE_UPDATE_INSTALLER_LINK
  # First create a temporal file
  !tempfile _TEMPFILE
  # Try to obtain the JRE Windows' BundleId and put it in _TEMPFILE
  !system 'wget -qO- http://www.java.com/en/download/manual.jsp        | \
           grep BundleId                                               | \
           grep Windows                                                | \
           grep -v Online                                              | \
           grep -v 64-bit                                              | \
           uniq                                                        | \
           sed -e $\'s/.*BundleId//g ; s/[^0-9]//g$\' > "${_TEMPFILE}"'
  # Read ${_TEMPFILE} and stuffed into _JRE_INSTALLER_BUNDLEID global flag
  !define /file _JRE_INSTALLER_BUNDLEID "${_TEMPFILE}"
  # Build the download link
  !define _JRE_INSTALLER "${JRE_INSTALLER_URL_PREFIX}=${_JRE_INSTALLER_BUNDLEID}"
  # Check if the download link is valid
  # If link is not valid ${_TEMPFILE} will be empty
  !system 'wget --quiet --spider ${_JRE_INSTALLER} && \
           echo "!define JRE_INSTALLER ${_JRE_INSTALLER}" > "${_TEMPFILE}" || \
           echo -n "" > "${_TEMPFILE}"'
  # Define JRE_INSTALLER iff '${_TEMPFILE}' is not empty
  !include '${_TEMPFILE}'
  # Remove
  !delfile '${_TEMPFILE}'

  !ifdef JRE_INSTALLER
    !verbose push
    !verbose 4
    !echo '[info] New JRE installer link is $\"${JRE_INSTALLER}$\"'
    !verbose pop
  !endif
  
  # Undef temporal gflags
  !undef _TEMPFILE
  !undef _JRE_INSTALLER_BUNDLEID
  !undef _JRE_INSTALLER
!endif  #  FORCE_JRE_UPDATE_INSTALLER_LINK

# Fallback when JRE_INSTALLER is not defined
!ifndef JRE_INSTALLER
  !define /ifndef  JRE_INSTALLER_BUNDLEID "83383"
  !define JRE_INSTALLER "${JRE_INSTALLER_URL_PREFIX}=${JRE_INSTALLER_BUNDLEID}"
!endif

# Causes the NSIS compiler to scan the ./plugins directory for plug-in DLLs
# Bundled plugins are:
#
# - Inetc: Internet client plug-in for files download and upload.  
#          @source http://nsis.sourceforge.net/Inetc_plug-in. To global install, 
#          go to your nsis folder (the directory containing Bin, Contrib, ... 
#          subfolders) and type:  
#          `wget http://nsis.sourceforge.net/mediawiki/images/c/c9/Inetc.zip &&  
#          unzip Inetc.zip && rm Inetc.zip`
!addplugindir /x86-ansi    "./plugins/x86-ansi"
!addplugindir /x86-unicode "./plugins/x86-unicode"

# Include the JRE Dynamic Installer header file
!include "jre_setup.nsh"
# =============================================================================

# =============================================================================
# WriteRegLastChangedInfo FIRST_ARGUMENT SECOND_ARGUMENT
# In a non anonymous build this compile-time macro read the file located at
# 'checkout/FIRST_ARGUMENT.last' and stores its contents to SECOND_ARGUMENT
# registry key. e.g.
# !insertmacro WriteRegLastChangedInfo "C++" "${APP_CORE_KEY}"
# read checkout/C++.last and stores its contents in ${APP_CORE_KEY} registry key
# =============================================================================
!define WriteRegLastChangedInfo "!insertmacro _WriteRegLastChangedInfo"
!macro _WriteRegLastChangedInfo _APP_CHK_FILENAME _APP_CHK_REGISTRY_KEY
  !ifndef SETUP_NO_CHECKOUT_INFO
    SetDetailsPrint textonly
    DetailPrint "Creating Build Date Registry Key| ${_APP_CHK_FILENAME}"
    SetDetailsPrint listonly
    # Read 'checkout/FIRST_ARGUMENT.last' file and stuffed into
    # 'LastChanged_FIRST_ARGUMENT' global flag
    !define /file "LastChanged_${_APP_CHK_FILENAME}" \
                  "${INPUT_CHKDIR}/${_APP_CHK_FILENAME}.last"
    !if "${LastChanged_${_APP_CHK_FILENAME}}" != ""
      # Store Last Changed Date (%Y-%m-%d %H:%M:%S) read from
      # 'checkout/FIRST_ARGUMENT.last' into SECOND_ARGUMENT registry key
      WriteRegStr SHCTX "${_APP_CHK_REGISTRY_KEY}"                 \
                        "${INSTALL_BUILD_DATE_REGISTRY_VALUENAME}" \
                        "${LastChanged_${_APP_CHK_FILENAME}}"
    !endif
    !undef "LastChanged_${_APP_CHK_FILENAME}"
  !endif # SETUP_NO_CHECKOUT_INFO
!macroend

# =============================================================================
# !packhdr is a useful compile time directive which allows modifications to the
# built installer executable header before it is written to the finished
# installer executable file. It can be used in conjunction with UPX. Pack the
# header (UPX) is a free, portable, extendable, high-performance executable
# packer for several executable formats. Visit http://upx.sourceforge.net/ for
# more information
# =============================================================================
!ifdef SETUP_HAVE_UPX
  !packhdr "header.dat" 'upx --best "header.dat"'
!endif

# =============================================================================
# InitGlobals macro
# =============================================================================
!define InitGlobals  "!insertmacro _InitGlobals"
!macro _InitGlobals
    StrCpy $java_bin_path           ""
    StrCpy $GetInstalledSize.total  0
    StrCpy $locale_language_code    "en"
    StrCpy $locale_language_name    "English"
    StrCpy $locale_language_id      ${LANG_ENGLISH}
!macroend

# =============================================================================
# Installer attributes
# =============================================================================
# Set the name of the installer
Name         "${PRETTYAPPNAME}"

# Set the text for the titlebar of the installer
Caption      "${PRETTYAPPCAPTION} Setup"

# Set the text that is shown at the bottom of the install window
BrandingText "${COMPANYNAME}"

# Define the installer name e.g.
# Unitex-GramLab-3.0_win32-setup.exe
# Unitex-GramLab-3.1beta_win32-setup.exe
# Unitex-GramLab-3.1beta_anonymous_win32-setup.exe
OutFile "${OUTPUT_SETUP_NAME}"

# Enabled the cyclic redundancy check (CRC)
CRCCheck on

# Add an XP manifest to the installer to use the new XP style when running
# on Windows XP. This affects the uninstaller too.
XPStyle on

# Don't uncomment this
# Installation directory
# already set by Multiuser.nsh, see MULTIUSER_INSTALLMODE_INSTDIR variable
;InstallDir   "$PROGRAMFILES\${APPNAME}"

# Don't uncomment this
# Get installation folder from registry if available
# already set by Multiuser.nsh, see MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_KEY
;InstallDirRegKey HKCU ${INSTALL_SETTINGS_KEY} ""

# =============================================================================
# Modern UI (MUI) Settings
# =============================================================================
# Show a message box with a warning when the user wants to close the installer.
!define MUI_ABORTWARNING

# Set the Cancel button as the default button on the message box.
!define MUI_ABORTWARNING_CANCEL_DEFAULT

# Set the icon for the window installer.
!define MUI_ICON   "theme/install.ico"
# Set the icon for the window uninstaller.
!define MUI_UNICON "theme/uninstall.ico"

# Display an image on the header of the page.
!define MUI_HEADERIMAGE
# Display the header image on the right side
!define MUI_HEADERIMAGE_RIGHT
# New MUI2 bitmap stretch modes: FitControl, NoStretchNoCrop[NoAlign] 
# and AspectFitHeight
!define MUI_HEADERIMAGE_UNBITMAP_STRETCH AspectFitHeight
# Bitmap image to display on the header of installers pages
!define MUI_HEADERIMAGE_BITMAP   "theme/header_install.bmp"
# Bitmap image to display on the header of uninstaller pages
!define MUI_HEADERIMAGE_UNBITMAP "theme/header_uninstall.bmp"

# Bitmap for the Welcome page and the Finish installer page
!define MUI_WELCOMEFINISHPAGE_BITMAP   "theme/wizard_install.bmp"
# Bitmap for the Welcome page and the Finish uninstaller page
!define MUI_UNWELCOMEFINISHPAGE_BITMAP "theme/wizard_uninstall.bmp"

# Temporal list of language resources files installed
!tempfile LANGRES_INSTALLED_FILES_LIST
${CheckIfFileExist} "${LANGRES_INSTALLED_FILES_LIST}"

# =============================================================================
# @ Pages
# =============================================================================

# =============================================================================
# Welcome Page
# =============================================================================
# Extra space for the title area
!define MUI_WELCOMEPAGE_TITLE_3LINES

# Title to display on the top of the page
!define MUI_WELCOMEPAGE_TITLE "Welcome to the ${PRETTYAPPNAME} \
                              ${PRETTYVERSION} Setup Wizard"

# Welcome message to display on the page
!define MUI_TEXT_WELCOME_INFO_TEXT "This wizard will guide you through the \
installation of ${PRETTYAPPNAME}, ${DESCRIPTION}.${NEW_LINE}${NEW_LINE}\
It is recommended that you close all other applications before starting Setup. \
This will make it possible to update relevant system files without having to \
reboot your computer.${NEW_LINE}${NEW_LINE}$_CLICK"

# Insert the Welcome Page
!insertmacro MUI_PAGE_WELCOME

# =============================================================================
# Update Page
# =============================================================================
!ifdef VER_MAJOR & VER_MINOR & VER_REVISION
  # Version updates are only available for non-anonymous builds
  !if VER_REVISION != "unknown"
    Page custom PageCheckUpdate PageLeaveCheckUpdate
  !endif
!endif

# =============================================================================
# Reinstall Page
# =============================================================================
!ifdef VER_MAJOR & VER_MINOR & VER_REVISION
  Page custom PageReinstall PageLeaveReinstall
!endif

# =============================================================================
# License Pages
# =============================================================================
# Lesser General Public License (LGPL)
!insertmacro MUI_PAGE_LICENSE "${INPUT_APPDIR}/${LGPL_FILE}"
# Lesser General Public License For Linguistic Resources (LGPL-LR)
!insertmacro MUI_PAGE_LICENSE "${INPUT_APPDIR}/${LGPLLR_FILE}"

# =============================================================================
# Components Page
# =============================================================================
# Layout with a small description area on the bottom of the page.
!define MUI_COMPONENTSPAGE_SMALLDESC
# Define a custom leave function
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE MUI_PAGE_COMPONENTS_LeaveFunction
# Insert the Components Page
!insertmacro MUI_PAGE_COMPONENTS

# =============================================================================
# Java Runtime Edition Page
# =============================================================================
# Only visible if Visual IDEs were selected and JRE ins't currently installed
# see "MUI_PAGE_COMPONENTS_LeaveFunction"
!insertmacro CUSTOM_PAGE_JREINFO

# =============================================================================
# Installation Mode (per-machine/per-user) Page
# =============================================================================
!insertmacro MULTIUSER_PAGE_INSTALLMODE

# =============================================================================
# Directory Page
# =============================================================================
# Custom directory top text
!define MUI_DIRECTORYPAGE_TEXT_TOP "Setup will install the application in the \
        following folder. To install in a different folder, click Browse and \
        select another.${NEW_LINE}${NEW_LINE}\
        Notice that this folder will be the installation ${PRETTYAPPNAME} folder. \
        It must be different from your ${PRETTYAPPNAME} workspace folder."

# Custom destination folder text
!define MUI_DIRECTORYPAGE_TEXT_DESTINATION "Destination folder where \
        ${PRETTYAPPNAME} will be installed"

# Insert directory page
!insertmacro MUI_PAGE_DIRECTORY

# =============================================================================
# Workspace folder
# =============================================================================
# Define a custom pre function
!define MUI_PAGE_CUSTOMFUNCTION_PRE   MUI_PAGE_DIRECTORY_Workspace_PreFunction
# Define a custom show function
!define MUI_PAGE_CUSTOMFUNCTION_SHOW  MUI_PAGE_DIRECTORY_Workspace_ShowFunction
# Define a custom leave function
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE MUI_PAGE_DIRECTORY_Workspace_LeaveFunction

# Custom page header text
!define MUI_PAGE_HEADER_TEXT    "${PRETTYAPPNAME} workspace folder"

# Custom page header subtext
!define MUI_PAGE_HEADER_SUBTEXT "Choose the folder in which to create your workspace."

# Custom directory top text
!define MUI_DIRECTORYPAGE_TEXT_TOP "Setup will create your workspace  \
        in the following folder. To select a different folder, click \
        &Workspace and select another.${NEW_LINE}${NEW_LINE} \
        Notice that this folder will be your ${PRETTYAPPNAME} workspace \
        folder. It must be different from the installation folder."

# Custom destination folder text
!define MUI_DIRECTORYPAGE_TEXT_DESTINATION "Destination folder where \
        your ${PRETTYAPPNAME} workspace will be created"

# Store the workspace folder in WORKSPACE_DIR
Var WORKSPACE_DIR
!define MUI_DIRECTORYPAGE_VARIABLE $WORKSPACE_DIR

; # Insert directory page
!insertmacro MUI_PAGE_DIRECTORY

# =============================================================================
# Install Files Page
# =============================================================================
# Define a custom pre function
!define MUI_PAGE_CUSTOMFUNCTION_PRE MUI_PAGE_INSTFILES_PreFunction
# Define a custom leave function
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE MUI_PAGE_INSTFILES_LeaveFunction
# Insert the Install Files Page
!insertmacro MUI_PAGE_INSTFILES

# =============================================================================
# Finish Page
# =============================================================================
# Extra space for the title area
!define MUI_FINISHPAGE_TITLE_3LINES

# Text for a link on the which the user can click to view a website or file.
!define MUI_FINISHPAGE_LINK "Visit the ${PRETTYAPPNAME} website for \
                             support information."

# Website or file which the user can select to view using the link.
!define MUI_FINISHPAGE_LINK_LOCATION  "${HOMEPAGE_URL}"

# Disables support for the page that allows the user to reboot the system.
!define MUI_FINISHPAGE_NOREBOOTSUPPORT

# Application which the user can select to run using a checkbox
# empty when used within MUI_FINISHPAGE_RUN_FUNCTION
!define MUI_FINISHPAGE_RUN

# Texts to display next to the 'Run program' checkbox
!define MUI_FINISHPAGE_RUN_TEXT       ""

# Call a function instead of executing an application (define MUI_FINISHPAGE_RUN 
# without parameters). You can use the function to execute multiple applications 
# or you can change the checkbox name and use it for other things.
!define MUI_FINISHPAGE_RUN_FUNCTION   RunUnitexGramLab

# Define a custom show function
!define MUI_PAGE_CUSTOMFUNCTION_SHOW  MUI_PAGE_FINISH_ShowFunction

# Insert the Finish Page
!insertmacro MUI_PAGE_FINISH

# =============================================================================
# Uninstaller Confirm Page
# =============================================================================
# Insert the Uninstaller Confirm Page
!insertmacro MUI_UNPAGE_CONFIRM

# =============================================================================
# Uninstaller Files Page
# =============================================================================
# Insert the Uninstaller Files Page
!insertmacro MUI_UNPAGE_INSTFILES

# =============================================================================
# @ Languages
# ===========================================================================
# Add ./i18n directory to the include directories list. This list is searched
# when !include is used.
!AddIncludeDir "./i18n"

# First language is the default language
!insertmacro MUI_LANGUAGE "English"

# ENHANCEMENT(martinec) Add support for Multilingual User Interfaces
;!insertmacro MUI_LANGUAGE "Arabic"
;!insertmacro MUI_LANGUAGE "Finnish"
;!insertmacro MUI_LANGUAGE "French"
;!insertmacro MUI_LANGUAGE "Georgian"
;!insertmacro MUI_LANGUAGE "German"
;!insertmacro MUI_LANGUAGE "Greek"
;!insertmacro MUI_LANGUAGE "Italian"
;!insertmacro MUI_LANGUAGE "Korean"
;!insertmacro MUI_LANGUAGE "NorwegianNynorsk"
;!insertmacro MUI_LANGUAGE "Norwegian"
;!insertmacro MUI_LANGUAGE "Polish"
;!insertmacro MUI_LANGUAGE "PortugueseBR"
;!insertmacro MUI_LANGUAGE "Portuguese"
;!insertmacro MUI_LANGUAGE "Russian"
;!insertmacro MUI_LANGUAGE "SerbianLatin"
;!insertmacro MUI_LANGUAGE "Serbian"
;!insertmacro MUI_LANGUAGE "Spanish"
;!insertmacro MUI_LANGUAGE "Thai"

# =============================================================================
# Reserve Files
# =============================================================================
# If you are using solid compression, files that are required before
# the actual installation should be stored first in the data block,
# because this will make your installer start faster.
# ReserveFile instruction takes into account the order of declaration
# try to reserve files in a correct order.
ReserveFile "theme/header_install.bmp"
ReserveFile "theme/header_uninstall.bmp"
ReserveFile "theme/install.ico"
ReserveFile "theme/uninstall.ico"
ReserveFile "theme/wizard_install.bmp"
ReserveFile "theme/wizard_uninstall.bmp"
ReserveFile "${INPUT_APPDIR}/${LGPL_FILE}"
ReserveFile "${INPUT_APPDIR}/${LGPLLR_FILE}"
ReserveFile /plugin "*.dll"
;!insertmacro MUI_RESERVEFILE_LANGDLL

# =============================================================================
# Version information
# Add the next fields in the Version Tab of the Windows File Properties.
# =============================================================================
!ifdef VER_MAJOR & VER_MINOR & VER_REVISION
  !ifndef ANONYMOUS_BUILD
    # Adds the Product Version on top of the Version Tab in the Properties
    # of the file.
    VIProductVersion "${VER_MAJOR}.${VER_MINOR}.${VER_REVISION}.0"
    VIAddVersionKey  "ProductVersion" "${VER_MAJOR}.${VER_MINOR}.${VER_REVISION}.0"
  !else # is an anonymous build
    # Anonymous builds have -1 as revision number, however, here we only use
    # ${VER_MAJOR} and ${VER_MINOR}. This is not a problem because the negative
    # revision number is already set in the "VersionRevision" key and effectively
    # used inside the PageReinstall function
    VIProductVersion "${VER_MAJOR}.${VER_MINOR}.0.0"
    VIAddVersionKey  "ProductVersion" "${VER_MAJOR}.${VER_MINOR}.0.0"
    VIAddVersionKey  "PrivateBuild"   "anonymous-build"
  !endif
  VIAddVersionKey "Author"          "Equipe d'informatique linguistique du \
   Laboratoire Informatique Gaspard Monge (LIGM). France."
  VIAddVersionKey "Comments"        "This program is free software; you can \
   redistribute it and/or modify it under the terms of the GNU Lesser General \
   Public License as published by the Free Software Foundation; either version \
   2.1 of the License, or (at your option) any later version."
  VIAddVersionKey "CompanyName"     "${COMPANYNAME}"
  VIAddVersionKey "FileVersion"     "${VERSION}"
  VIAddVersionKey "FileDescription" "${PRETTYAPPNAME} ${SHORTDESCRIPTION}."
  VIAddVersionKey "LegalCopyright"  "Copyright 2001-${VER_CURRENTYEAR} ${COMPANYNAME}"
  VIAddVersionKey "ProductName"     "${PRETTYAPPNAME} Setup"
  VIAddVersionKey "Website"         "${HOMEPAGE_URL}"
!endif

# =============================================================================
# @ Installer Run-time Macros and Functions
# =============================================================================

# =============================================================================
# VerifyUserIsAdmin
# Verify if the current user has admin privileges
# @source http://nsis.sourceforge.net/A_simple_installer_with_start_menu_shortcut_and_uninstaller
# =============================================================================
!macro VerifyUserIsAdmin
  UserInfo::GetAccountType
  pop $0
  ${If} $0 != "admin" # Require admin rights on NT4+
    messageBox mb_iconstop "Administrator rights required!"
    setErrorLevel 740 # ERROR_ELEVATION_REQUIRED
    quit
  ${EndIf}
!macroend

# =============================================================================
# CreateWebShortCut
# Creates a Web ShortCut
# Params : ShortCutFile TargetURL
# @source http://mulder.googlecode.com/svn/trunk/LameXP/src/LameXP.nsi
# =============================================================================
!define CreateWebShortCut "!insertmacro CreateWebShortCut"
!macro  CreateWebShortCut ShortCutFile TargetURL
	Push $0
	Push $1
	StrCpy $0 "${ShortCutFile}"
	StrCpy $1 "${TargetURL}"
	Call _CreateWebShortCut
	Pop $1
	Pop $0
!macroend

Function _CreateWebShortCut
	FlushINI          "$0"
	SetFileAttributes "$0" FILE_ATTRIBUTE_NORMAL
	DeleteINISec      "$0" "DEFAULT"
	DeleteINISec      "$0" "InternetShortcut"
	WriteINIStr       "$0" "DEFAULT" "BASEURL" "$1"
	WriteINIStr       "$0" "InternetShortcut" "ORIGURL" "$1"
	WriteINIStr       "$0" "InternetShortcut" "URL" "$1"
	WriteINIStr       "$0" "InternetShortcut" "IconFile" "$SYSDIR\SHELL32.dll"
	WriteINIStr       "$0" "InternetShortcut" "IconIndex" "135"
	FlushINI          "$0"
	SetFileAttributes "$0" FILE_ATTRIBUTE_READONLY
FunctionEnd

# =============================================================================
# SplashScreen
# @source Splash Screen example from NSIS distribution (Splash/Example.nsi)
# =============================================================================
!ifdef SETUP_SHOW_SPLASH_SCREEN
  function SplashScreen
    # The plugins dir is automatically deleted when the installer finish
    InitPluginsDir
    # TODO(martinec) create splash.bmp
    File /oname=$PLUGINSDIR\splash.bmp "theme/splash.bmp"

    splash::show 1000 $PLUGINSDIR\splash

    Pop $0 ; '1' splash screen closed early,
           ; '0' closed normally, and '-1' if some error occurred.
  functionEnd
!endif  # !ifdef SETUP_SHOW_SPLASH_SCREEN

# =============================================================================
# GetLocaleLanguageName
# Get the system default language ID and setup the following global variables:
# =============================================================================
# locale_language_name : Related to Unitex/GramLab language directory name
# locale_language_code : ISO 639-1 language code (excepting : no_ny, pt_br, sr_la)
# locale_language_id   : NSIS integer Language ID when avalaible
#
# English is the default language.
# See also SetLocaleOptions function
# =============================================================================
function GetLocaleLanguageName
	Push $0
	Push $1

  System::Call 'kernel32::GetSystemDefaultLangID() i .r0'

  # Format output as an unsigned 2-bytes hexadecimal integer (uppercase)
  IntFmt $0 "0x%.4X" $0

  #  +-------------------------+-------------------------+
  #  |     SubLanguage ID      |   Primary Language ID   |
  #  +-------------------------+-------------------------+
  #  15                    10  9                         0   bit
  #    0   0   0   0   0   0   1  1  1  1  1  1  1  1  1  1  mask (0x3FF)
  #    0   0   0   0   0   0   0  1  1  1  1  1  1  1  1  1  mask (0x1FF)
  #    0   0   0   0   0   0   0  0  0  0  0  0  1  1  1  1  mask (0x0FF)

  #  0x03FF : Primary Language ID
  #  0x01FF : System-defined primary language identifier. A user-defined primary
  #           language identifier has a value in the range 0x0200 to 0x03FF
  #  0x00FF : Group Primary Language identifier

  # For more information on language identifiers, see Language Identifier
  # Constants and Strings at

  # Get only low-order nibble (Group Primary Language ID)
  IntOp $1 $0 & 0x00FF

  # Format result as an unsigned 1-byte hexadecimal integer (uppercase)
  IntFmt $1 "0x%.2X" $1

  # Set language ID
  # Arabic
  ${If}     $1   == 0x01
    StrCpy  $locale_language_code                    "ar"
    StrCpy  $locale_language_name                    "Arabic"
    !ifdef  ${LANG_ARABIC}
     StrCpy $locale_language_id                      ${LANG_ARABIC}
    !endif
  # English
  ${ElseIf} $1   == 0x09
    StrCpy  $locale_language_code                    "en"
    StrCpy  $locale_language_name                    "English"
    !ifdef  ${LANG_ENGLISH}
    StrCpy  $locale_language_id                      ${LANG_ENGLISH}
    !endif
  # Finnish
  ${ElseIf} $1   == 0x0B
    StrCpy  $locale_language_code                    "fi"
    StrCpy  $locale_language_name                    "Finnish"
    !ifdef  ${LANG_FINNISH}
    StrCpy  $locale_language_id                      ${LANG_FINNISH}
    !endif
  # French
  ${ElseIf} $1   == 0x0C
    StrCpy  $locale_language_code                    "fr"
    StrCpy  $locale_language_name                    "French"
    !ifdef  ${LANG_FRENCH}
    StrCpy  $locale_language_id                      ${LANG_FRENCH}
    !endif
  # Georgian
  ${ElseIf} $1   == 0x37
    StrCpy  $locale_language_code                    "ka"
    StrCpy  $locale_language_name                    "Georgian (Ancient)"
    !ifdef  ${LANG_GEORGIAN}
    StrCpy  $locale_language_id                      ${LANG_GEORGIAN}
    !endif
  # German
  ${ElseIf} $1   == 0x07
    StrCpy  $locale_language_code                    "de"
    StrCpy  $locale_language_name                    "German"
    !ifdef  ${LANG_GERMAN}
    StrCpy  $locale_language_id                      ${LANG_GERMAN}
    !endif
  # Greek
  ${ElseIf} $1   == 0x08
    StrCpy  $locale_language_code                    "el"
    StrCpy  $locale_language_name                    "Greek (Modern)"
    !ifdef  ${LANG_GREEK}
    StrCpy  $locale_language_id                      ${LANG_GREEK}
    !endif
  # Italian
  ${ElseIf} $1   == 0x10
    StrCpy  $locale_language_code                    "it"
    StrCpy  $locale_language_name                    "Italian"
    !ifdef  ${LANG_ITALIAN}
    StrCpy  $locale_language_id                      ${LANG_ITALIAN}
    !endif
  # Korean
  ${ElseIf} $1   == 0x12
    StrCpy  $locale_language_code                    "ko"
    StrCpy  $locale_language_name                    "Korean"
    !ifdef  ${LANG_KOREAN}
    StrCpy  $locale_language_id                      ${LANG_KOREAN}
    !endif
  # Norwegian
  ${ElseIf} $1   == 0x14
  # Norwegian (Nynorsk)
    ${If}   $0   == 0x0814
    StrCpy  $locale_language_code                    "no_ny"
    StrCpy  $locale_language_name                    "Norwegian (Nynorsk)"
    !ifdef  ${LANG_NORWEGIANNYNORSK}
    StrCpy  $locale_language_id                      ${LANG_NORWEGIANNYNORSK}
    !endif
  # Norwegian (Bokmal)
    ${Else} # $0 == 0x0414
    StrCpy  $locale_language_code                    "no"
    StrCpy  $locale_language_name                    "Norwegian (Bokmal)"
    !ifdef  ${LANG_NORWEGIAN}
    StrCpy  $locale_language_id                      ${LANG_NORWEGIAN}
    !endif
    ${EndIf}
  # Polish
  ${ElseIf} $1   == 0x15
    StrCpy  $locale_language_code                    "pl"
    StrCpy  $locale_language_name                    "Polish"
    !ifdef  ${LANG_POLISH}
    StrCpy  $locale_language_id                      ${LANG_POLISH}
    !endif
  # Portuguese
  ${ElseIf} $1   == 0x16
  # Portuguese (Brazil)
    ${If}   $0   == 0x0416
    StrCpy  $locale_language_code                    "pt_br"
    StrCpy  $locale_language_name                    "Portuguese (Brazil)"
    !ifdef  ${LANG_PORTUGUESEBR}
    StrCpy  $locale_language_id                      ${LANG_PORTUGUESEBR}
    !endif
  # Portuguese (Portugal)
    ${Else} # $0 == 0x0816
    StrCpy  $locale_language_code                    "pt"
    StrCpy  $locale_language_name                    "Portuguese (Portugal)"
    !ifdef  ${LANG_PORTUGUESE}
    StrCpy  $locale_language_id                      ${LANG_PORTUGUESE}
    !endif
    ${EndIf}
  # Russian
  ${ElseIf} $1   == 0x19
    StrCpy  $locale_language_code                    "ru"
    StrCpy  $locale_language_name                    "Russian"
    !ifdef  ${LANG_RUSSIAN}
    StrCpy  $locale_language_id                      ${LANG_RUSSIAN}
    !endif
  # Serbian
  ${ElseIf} $1   == 0x1A
  # Serbian-Latin
    ${If}   $0   == 0x081A
    ${OrIf} $0   == 0x181A
    StrCpy  $locale_language_code                    "sr_la"
    StrCpy  $locale_language_name                    "Serbian-Latin"
    !ifdef  ${LANG_SERBIANLATIN}
    StrCpy  $locale_language_id                      ${LANG_SERBIANLATIN}
    !endif
  # Serbian-Cyrillic
    ${Else} # $0 == 0x1C1A
    StrCpy  $locale_language_code                    "sr"
    StrCpy  $locale_language_name                    "Serbian-Cyrillic "
    !ifdef  ${LANG_SERBIAN}
    StrCpy  $locale_language_id                      ${LANG_SERBIAN}
    !endif
    ${EndIf}
  # Spanish
  ${ElseIf} $1   == 0x0A
    StrCpy  $locale_language_code                    "es"
    StrCpy  $locale_language_name                    "Spanish"
    !ifdef  ${LANG_SPANISH}
    StrCpy  $locale_language_id                      ${LANG_SPANISH}
    !endif
  # Thai
  ${ElseIf} $1   == 0x1E
    StrCpy  $locale_language_code                    "th"
    StrCpy  $locale_language_name                    "Thai"
    !ifdef  ${LANG_THAI}
    StrCpy  $locale_language_id                      ${LANG_THAI}
    !endif
  # Force English by default
  ${Else}
    StrCpy  $locale_language_code                    "en"
    StrCpy  $locale_language_name                    "English"
    !ifdef  ${LANG_ENGLISH}
    StrCpy  $locale_language_id                      ${LANG_ENGLISH}
    !endif
  ${EndIf}

  ClearErrors
	Pop $1
	Pop $0
functionEnd

# =============================================================================
# @ Installer Sections
# =============================================================================
# - Core Components
# - Third Party Core Components (hide)
# - Visual Integrated Environments
# - Third Party Visual IDEs Components (hide)
# - JRE installation (hide)
# - Language Resources
# - Source Code
# - User Manual
# - Start Menu and Desktop Shortcuts
# - Post installation (hide)
# - Dummy Last Section (hide)
# =============================================================================

# =============================================================================
# Core Components
# =============================================================================
${MementoSection} "Core Components (required)" CoreSection
  SetDetailsPrint textonly
  DetailPrint "Installing ${PRETTYAPPNAME} Core Components..."
  SetDetailsPrint listonly

  # RO : Required
  SectionIn 1 2 3 RO

  # Create Users directory
  CreateDirectory "$INSTDIR\${USR_DIRNAME}"

	# Sets the output path ($OUTDIR) and creates it (recursively if necessary),
  # if it does not exist.
	setOutPath "$INSTDIR\${APP_DIRNAME}"

	# Files added here should be removed by the uninstaller
  # (see section "uninstall")

  # icons
  file "${INPUT_APPDIR}/${ICON_FILE}"
  file "${INPUT_APPDIR}/Unitex1.ico"

  # licenses
  file "${INPUT_APPDIR}/${LGPL_FILE}"
  file "${INPUT_APPDIR}/${LGPLLR_FILE}"
  file "${INPUT_APPDIR}/Apache-1.1.txt"
  file "${INPUT_APPDIR}/BSD_tre.txt"

  # disclaimer
  file "${INPUT_APPDIR}/Disclaimer.txt"

  # UnitexToolLogger
  file "${INPUT_APPDIR}/UnitexToolLogger.exe"

  # Store core components (C++.last) Last Changed Date info
  ${WriteRegLastChangedInfo} "C++" "${APP_CORE_KEY}"

  # Readme
  setOutPath "$INSTDIR"
  file "${INPUT_UNITEXDIR}/README.TXT"
${MementoSectionEnd} #  CoreSection

# =============================================================================
# Third Party Core Components
# =============================================================================

# =============================================================================
# XAlign
# =============================================================================
# XALign is a LGPL alignment software tool
# For additional information, see http://led.loria.fr/outils.php.html#4
# =============================================================================
section -ThirdParty_XAlignSection
  # Files added here should be removed by the uninstaller
  # (see section "Uninstall")
  # *.jar
  setOutPath "$INSTDIR\${APP_DIRNAME}"
  file "${INPUT_APPDIR}/XAlign.jar"
  file "${INPUT_APPDIR}/xercesImpl.jar"
  file "${INPUT_APPDIR}/xml-apis.jar"

  # XAlign Unitex folder
  setOutPath "$INSTDIR\${XALIGN_DIRNAME}"

  # recursive install "/XAlign" directory contents
  # /r    : files and directories recursively searched
  # /x .* : exclude hide (files and directories)
  File /r /x .* "${INPUT_XALIGNDIR}/*.*"

  # Store XAlign (XAlign.last) Last Changed Date info
  ${WriteRegLastChangedInfo} "XAlign" "${APP_THIRDPARTY_KEY}\XAlign"
sectionEnd  #  -ThirdParty_XAlignSection

# =============================================================================
# Visual Integrated Environments
# =============================================================================
SectionGroup "Visual Integrated Environments"   IDESection
  ${MementoSection}  "Unitex Java IDE"          IDESectionUnitex
    SectionIn 1 2 3
    SetDetailsPrint textonly
    DetailPrint "Installing Visual Integrated Environment | Unitex Java IDE..."
    SetDetailsPrint listonly

    setOutPath "$INSTDIR\${APP_DIRNAME}"

    # Files added here should be removed by the uninstaller
    # (see section "uninstall")
    file "${INPUT_APPDIR}/${UNITEX_JAVA_FILE}"

    # revision date
    # If the /nonfatal switch is used and no files are found, a warning will be
    # issued instead of an error.
    file /nonfatal "${INPUT_APPDIR}/revision.date"

    # Store Unitex Java IDE (Java.last) Last Changed Date info
    ${WriteRegLastChangedInfo} "Java" "${APP_IDE_KEY}\UnitexJavaIDE"
  ${MementoSectionEnd}  # IDESectionUnitex

  ${MementoSection} "GramLab Java IDE"  IDESectionGramLab
    SectionIn 1 2 3
    SetDetailsPrint textonly
    DetailPrint "Installing Visual Integrated Environment | GramLab Java IDE..."
    SetDetailsPrint listonly

    setOutPath "$INSTDIR\${APP_DIRNAME}"

    # Files added here should be removed by the uninstaller
    # (see section "Uninstall")
    file "${INPUT_APPDIR}/${GRAMLAB_JAVA_FILE}"

    # revision date
    # If the /nonfatal switch is used and no files are found, a warning will be
    # issued instead of an error.
    file /nonfatal "${INPUT_APPDIR}/gramlab_revision.date"

    # disclaimer
    file "${INPUT_APPDIR}/Disclaimer-Gramlab.txt"

    # gramlab-super-pom
    file "${INPUT_APPDIR}/pom.xml"

    # maven assembly files
    SetOutPath "$INSTDIR\${APP_DIRNAME}\assembly"

    # recursive install "assembly" directory contents
    # /r    : files and directories recursively searched
    # /x .* : exclude hide (files and directories)
    File /r /x .* "${INPUT_APPDIR}/assembly/*.*"

    # Store GramLab Java IDE (Gramlab.last) Last Changed Date info
    ${WriteRegLastChangedInfo} "Gramlab" "${APP_IDE_KEY}\GramLabJavaIDE"
  ${MementoSectionEnd}  # IDESectionGramLab
SectionGroupEnd  # IDESection

# =============================================================================
# Page components Leave Function
# =============================================================================
# Set JRE_SETUP_HIDE_INFO_PAGE to 0 if both Unitex Java IDE and GramLab Java IDE
# sections were not selected
# =============================================================================
Function MUI_PAGE_COMPONENTS_LeaveFunction
  ; JRE manually install by default
  IntOp  $RB_Ar3_State $RB_Ar3_State | ${BST_CHECKED}

  ; By default setup wizard will show the JRE installation page
  IntOp  $JRE_SETUP_HIDE_INFO_PAGE $JRE_SETUP_HIDE_INFO_PAGE & 0

  ; Check if Unitex Java IDE was selected
  SectionGetFlags ${IDESectionUnitex} $0
  IntOp $0 $0 & ${SF_SELECTED}
  ; If Unitex Java IDE was select goto exit
  IntCmp $0 ${SF_SELECTED} exit

  ; Check if GramLab Java IDE was selected
  SectionGetFlags ${IDESectionGramLab} $0
  IntOp $0 $0 & ${SF_SELECTED}
  ; If Unitex GramLab IDE was select goto exit
  IntCmp $0 ${SF_SELECTED} exit

  ; Both Unitex and GramLab IDEs were not selected
  ; Hide Java Setup even if the JRE isn't installed
  IntOp  $JRE_SETUP_HIDE_INFO_PAGE $JRE_SETUP_HIDE_INFO_PAGE | 1
exit:
FunctionEnd  # MUI_PAGE_COMPONENTS_LeaveFunction

# =============================================================================
# Macro MUI_INNERDIALOG_TEXT
# This macro was adapted from Modern UI/System.nsh
# =============================================================================
!macro MUI_INNERDIALOG_TEXT CONTROL TEXT

  !verbose push
  !verbose 4

  FindWindow  $mui.DirectoryPage "#32770" "" $HWNDPARENT
  GetDlgItem  $mui.DirectoryPage $mui.DirectoryPage  ${CONTROL}
  SendMessage $mui.DirectoryPage ${WM_SETTEXT} 0 "STR:${TEXT}"

  !verbose pop

!macroend

# =============================================================================
# Page components Pre Function
# =============================================================================
Function MUI_PAGE_DIRECTORY_Workspace_PreFunction
  # Workspace page will be showed only if at least one IDE section was selected
  ${IfNot}   ${SectionIsSelected} ${IDESectionUnitex}
  ${OrIfNot} ${SectionIsSelected} ${IDESectionGramLab}
    Abort
  ${EndIf}
  # TODO(martinec) Check if workspace configuration files are already created
FunctionEnd  # MUI_PAGE_DIRECTORY_Workspace_PreFunction

# =============================================================================
# Page components Show Function
# =============================================================================
Function MUI_PAGE_DIRECTORY_Workspace_ShowFunction
  ; !insertmacro MUI_INNERDIALOG_TEXT 1006 "A"                   # Text
  ; !insertmacro MUI_INNERDIALOG_TEXT 1020 "B"                   # DirectoryBox
  !insertmacro MUI_INNERDIALOG_TEXT 1019 "$DOCUMENTS\${APPNAME}" # Directory
  !insertmacro MUI_INNERDIALOG_TEXT 1001 "&Workspace..."         # BrowseButton
  ; !insertmacro MUI_INNERDIALOG_TEXT 1023 "D"                   # SpaceRequired
  ; !insertmacro MUI_INNERDIALOG_TEXT 1024 "E"                   # SpaceAvailable
FunctionEnd  # MUI_PAGE_DIRECTORY_Workspace_ShowFunction

# =============================================================================
# Function isEmptyDir
# @source http://nsis.sourceforge.net/Check_if_dir_is_empty
# =============================================================================
Function isEmptyDir
  # Stack ->                    # Stack: <directory>
  Exch $0                       # Stack: $0
  Push $1                       # Stack: $1, $0
  FindFirst $0 $1 "$0\*.*"
  strcmp $1 "." 0 _notempty
    FindNext $0 $1
    strcmp $1 ".." 0 _notempty
      ClearErrors
      FindNext $0 $1
      IfErrors 0 _notempty
        FindClose $0
        Pop $1                  # Stack: $0
        StrCpy $0 1
        Exch $0                 # Stack: 1 (true)
        goto _end
     _notempty:
       FindClose $0
       ClearErrors
       Pop $1                   # Stack: $0
       StrCpy $0 0
       Exch $0                  # Stack: 0 (false)
  _end:
FunctionEnd

# =============================================================================
# Page components Leave Function
# =============================================================================
Function MUI_PAGE_DIRECTORY_Workspace_LeaveFunction
  # Retrieves the full path of the workspace directory
  Push "$WORKSPACE_DIR"
  System::Call 'KERNEL32::GetFullPathName(ts,i${NSIS_MAX_STRLEN},t.r1,t)i.r0'
  ${If} $0 <> 0
     StrCpy $WORKSPACE_DIR $1
  ${Else}
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Can not create folder $WORKSPACE_DIR"
    Abort
  ${EndIf}

  # Test that $WORKSPACE_DIR and $INSTDIR are not at the same level
  # i.e. $WORKSPACE_DIR is not the $INSTDIR or a subdirectory of it
  ${StrStr} $R0 "$WORKSPACE_DIR" "$INSTDIR"
  ${If} $R0 == "$WORKSPACE_DIR"
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground \
    "Your workspace directory can not be created at the ${PRETTYAPPNAME} installation directory \
    level. Please select another folder."
    Abort
  ${EndIf}

  # Try to create the parent workspace directory
  CreateDirectory "$WORKSPACE_DIR"

  # Check if the directory has been created
  ${IfNot} ${FileExists} "$WORKSPACE_DIR\*.*"
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Can not create folder $WORKSPACE_DIR"
    Abort
  ${EndIf}
  
  # Check if the root directory workspace is empty, warning if not
  Push "$WORKSPACE_DIR"
  Call isEmptyDir
  Pop $0
  ${If} $0 <> 1
    MessageBox MB_ICONINFORMATION|MB_YESNO "Your workspace folder: $WORKSPACE_DIR \
    already exists and is not empty. Continue anyway ?" IDYES +2
     Abort
  ${EndIf}

  # Unitex workspace
  ${If} ${SectionIsSelected} ${IDESectionUnitex}
    # Create the Unitex workspace directory
    CreateDirectory "$WORKSPACE_DIR\${UNITEX_WORKSPACE_NAME}"

    # Check if the Unitex workspace directory has been created
    ${IfNot} ${FileExists} "$WORKSPACE_DIR\${UNITEX_WORKSPACE_NAME}\*.*"
      MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Can not create folder \
      $WORKSPACE_DIR\${UNITEX_WORKSPACE_NAME}"
      Abort
    ${EndIf}

    # Save the Unitex workspace configuration
    FileOpen  $R0 "$PROFILE\${UNITEX_WORKSPACE_FILE}" w
    FileWrite $R0 "$WORKSPACE_DIR\${UNITEX_WORKSPACE_NAME}"
    FileClose $R0
  ${EndIf}  # ${SectionIsSelected} ${IDESectionUnitex}

  # GramLab workspace
  ${If} ${SectionIsSelected} ${IDESectionGramLab}
    # Create the GramLab workspace directory
    CreateDirectory "$WORKSPACE_DIR\${GRAMLAB_WORKSPACE_NAME}"

    # Check if the GramLab workspace directory has been created
    ${IfNot} ${FileExists} "$WORKSPACE_DIR\${GRAMLAB_WORKSPACE_NAME}\*.*"
      MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Can not create folder \
      $WORKSPACE_DIR\${GRAMLAB_WORKSPACE_NAME}"
      Abort
    ${EndIf}

    # Save the GramLab workspace configuration
    FileOpen  $R0 "$PROFILE\${GRAMLAB_WORKSPACE_FILE}" w
    FileWrite $R0 "svn_repositories: 0$\r$\n"
    FileWrite $R0 "$WORKSPACE_DIR\${GRAMLAB_WORKSPACE_NAME}"
    FileWrite $R0 "$\r$\n"
    FileClose $R0
  ${EndIf} #  ${SectionIsSelected} ${IDESectionGramLab}

FunctionEnd  # MUI_PAGE_DIRECTORY_Workspace_LeaveFunction

# =============================================================================
# Third Party Visual IDEs Components
# =============================================================================

# =============================================================================
# SVNKit
# =============================================================================
# SVNKit is an Open Source pure Java Subversion library
# For additional information, see http://svnkit.com/
# =============================================================================
section -ThirdPartySVNKitSection
  # Only if at least one IDE section was selected
  ${If}   ${SectionIsSelected} ${IDESectionUnitex}
  ${OrIf} ${SectionIsSelected} ${IDESectionGramLab}
    setOutPath "$INSTDIR\${APP_DIRNAME}"

    # Files added here should be removed by the uninstaller
    # (see section "Uninstall")
    file "${INPUT_APPDIR}/svnkitclient.jar"

    # FIXME(martinec) Actually SVNKit.last doesn't exist in the /checkout folder.
    # Store SVNKit (SVNKit.last) Last Changed Date info
    # ${WriteRegLastChangedInfo} "SVNKit" "${APP_THIRDPARTY_KEY}\SVNKit"
  ${endif}
sectionEnd  # -ThirdPartySVNKitSection

# =============================================================================
# JRE Installation
# =============================================================================
section -InstallJRE
  ${If}   ${SectionIsSelected} ${IDESectionUnitex}
  ${OrIf} ${SectionIsSelected} ${IDESectionGramLab}
    call DownloadAndInstallJREIfNecessary

    # Verify JRE Installation and save JRE executable path
    Push "${JRE_VERSION}"
    call DetectJRE
    Pop $0	# Get return value from stack
    Pop $1	# get JRE path (or error message)
    StrCmp $0 "OK" 0 continue_without_jre
     IfFileExists "$1\bin\javaw.exe" 0 continue_without_jre
      # Store the path where javaw executable is installed
      StrCpy $java_bin_path  "$1\bin\javaw.exe"
    continue_without_jre:
  ${endif}
sectionEnd  # -InstallJRE

# =============================================================================
# AddLangResSection
# 'LANGUAGE NAME' 'SECTION_NAME' 'DEFAULT_RESLANG_INSTTYPEIDX'
# =============================================================================
!define AddLangResSection "!insertmacro _AddLangResSection"
!macro _AddLangResSection LangName SectionName InstTypeIdx
  ${MementoSection}  "${LangName}"      "LangResSection${SectionName}"
    SectionIn ${InstTypeIdx}

    SetDetailsPrint textonly
    DetailPrint "Installing Language Resources | ${LangName}..."
    SetDetailsPrint listonly

    setOutPath "$INSTDIR\${LangName}"

    # We don't want to overwrite user's customized language resources
    SetOverwrite off

    !tempfile "_SHELL_SCRIPT_TEMP_FILE_${SectionName}"

    # Okay, this is a little bit tricky.

    # this is to produce two consecutive backslashes : '\\'
    !define ESCAPED_BACKSLASH "echo $\'92$\' | \
                               awk $\'{ printf $\"%c%c$\",$0,$0 ;}$\'"

    # this is to produce a dollar symbol ($) followed by a back-slash (\) : '$\'
    !define ESCAPED_SEQUENCE   "echo $\'92$\' | \
                                awk $\'{ printf $\"$%c%c$\",$0,$0 ;}$\'"

    !define SHELL_SCRIPT_GET_LANG_FILES                                 '\
      ls -U1Rp "${INPUT_UNITEXDIR}/${LangName}"                        | \
      grep -v "/$"                                                     | \
      grep -v "^$"                                                     | \
      sed -e $\'s#:$##g$\'                                             | \
      while read -r file ; do                                            \
        if [ -d "$file" ]; then                                          \
          DIRECTORY="$file";                                             \
          LANGRES_OUTPUT_PATH=$(printf $\'%cINSTDIR%s$\'                 \
             $ "$(echo -n /${file#${INPUT_UNITEXDIR}/} |                 \
             tr $\"/$\" $\"$(${ESCAPED_BACKSLASH})$\")");                \
          printf "setOutPath %s" "$\'$LANGRES_OUTPUT_PATH$\'";           \
        else                                                             \
          if [ -f "$DIRECTORY/$file" ]; then                             \
            FILE=$(echo -n "$DIRECTORY/$file" |                          \
                   sed -e $\"s:$\':$(${ESCAPED_SEQUENCE})$\':g$\");      \
            printf "file       %s" "$\'$FILE$\'";                        \
          fi;                                                            \
        fi;                                                              \
        echo "";                                                         \
      done | tee "${_SHELL_SCRIPT_TEMP_FILE_${SectionName}}"             \
              >> "${LANGRES_INSTALLED_FILES_LIST}"'

    !system  '${SHELL_SCRIPT_GET_LANG_FILES}'  = 0
    !include '${_SHELL_SCRIPT_TEMP_FILE_${SectionName}}'
    !delfile '${_SHELL_SCRIPT_TEMP_FILE_${SectionName}}'

    !undef SHELL_SCRIPT_GET_LANG_FILES
    !undef ESCAPED_SEQUENCE
    !undef ESCAPED_BACKSLASH

    !undef "_SHELL_SCRIPT_TEMP_FILE_${SectionName}"

    # Restore overwrite
    SetOverwrite on

    # Store language resource (LangName.last) Last Changed Date info
    ${WriteRegLastChangedInfo} "${LangName}" "${APP_LANGRES_KEY}\${LangName}"

  ${MementoSectionEnd}  # LangResSection${SectionName}
!macroend #  _AddLangResSection

# =============================================================================
# Language Resources
# =============================================================================
SectionGroup "Language Resources" LangResSection

  # Include English language resources
  # ${AddLangResSection} 'LANGUAGE NAME' 'SECTION_NAME' 'DEFAULT_RESLANG_INSTTYPEIDX'
  ${AddLangResSection} 'English'              'English'   '1 2 3 RO'

  # Dynamically include all other language resources

  # Default installation type for language resources
  !define DEFAULT_RESLANG_INSTTYPEIDX          "1 2"

  !tempfile _SHELL_SCRIPT_TEMP_FILE

  # Get all first-level directories inside ${INPUT_UNITEXDIR} excluding
  # /App, /English, /Src, /Users, /XAlign and hidden files. Then create a list
  # with each 'DIRECTORY NAME' having the next form
  # ${AddLangResSection} 'DIRECTORY NAME'   'DIRECTORY_NAME'   '1 2'
	# try to don't use simple quote (') characters, escape it with $\'
  !define SHELL_SCRIPT_GET_LANG_NAMES '                             \
   find -L "${INPUT_UNITEXDIR}" -maxdepth 1                         \
    -not -path "${INPUT_UNITEXDIR}/English"                         \
    -not -path "${INPUT_UNITEXDIR}/"                                \
    -not -path "${INPUT_UNITEXDIR}"                                 \
    -not -path "${INPUT_APPDIR}"                                    \
    -not -path "${INPUT_SRCDIR}"                                    \
    -not -path "${INPUT_USRDIR}"                                    \
    -not -path "${INPUT_XALIGNDIR}"                                 \
    -not -name ".*"                                                 \
    -type d -print |                                                \
   while read -r directory ; do                                     \
         LANG_NAME=$(basename "$directory");                        \
         SECTION_NAME=$(echo -n "$LANG_NAME"  | tr [:blank:] "_");  \
         printf "%cinsertmacro _AddLangResSection %-25s %-25s %s" ! \
                "$\'$LANG_NAME$\'" "$\'$SECTION_NAME$\'"            \
                "$\'${DEFAULT_RESLANG_INSTTYPEIDX}$\'" ;            \
         echo "" ;                                                  \
   done | sort > "${_SHELL_SCRIPT_TEMP_FILE}"'

  !system  '${SHELL_SCRIPT_GET_LANG_NAMES}'
  !ifndef DEBUG_MODE
     # Other language resources inclusion is not enabled when DEBUG_MODE flag
     # is passed. This speed up the compilation process when testing
    !include '${_SHELL_SCRIPT_TEMP_FILE}'
  !endif
  !delfile '${_SHELL_SCRIPT_TEMP_FILE}'
  !undef  SHELL_SCRIPT_GET_LANG_NAMES
	!undef _SHELL_SCRIPT_TEMP_FILE
SectionGroupEnd  # LangResSection

# =============================================================================
# Source Code
# Remove this section from the final build passing -DSETUP_NO_SOURCES_SECTION
# =============================================================================
!ifndef SETUP_NO_SOURCES_SECTION
SectionGroup "Source Code"                            SrcSection
  ${MementoSection}  "Core Components"                SrcSectionCore
    SectionIn 1
    SetDetailsPrint textonly
    DetailPrint "Installing Source Code | Core Components..."
    SetDetailsPrint listonly

    # Core Components source
    # TODO(martinec) Why not deliver a single C++.zip file as with Java.zip?
    # TODO(martinec) Perhaps a better name would be "Core" and not "C++"
    # /r : recursive, /x exclude
    setOutPath "$INSTDIR\${SRC_DIRNAME}\C++"
    File /r /x .* "${INPUT_SRCDIR}/C++/*.*"

    # Core Components SVN Log
    setOutPath "$INSTDIR\${SRC_DIRNAME}"
    file /nonfatal "${INPUT_SRCDIR}/log_svn_C++.txt"
  ${MementoSectionEnd}

  ${MementoSection}  "Unitex Java IDE" SrcSectionUnitex
    SectionIn 1
    SetDetailsPrint textonly
    DetailPrint "Installing Source Code | Unitex Java IDE..."
    SetDetailsPrint listonly

    # Unitex Java IDE source
    setOutPath "$INSTDIR\${SRC_DIRNAME}"
    File "${INPUT_SRCDIR}/Java.zip"

    # Unitex Java IDE SVN Log
    setOutPath "$INSTDIR\${SRC_DIRNAME}"
    file /nonfatal "${INPUT_SRCDIR}/log_svn_Java.txt"
  ${MementoSectionEnd}

  # FIXME(martinec) currently GramLab source code is not available in the main
  # Unitex SVN Repository
  ;${MementoSection}  "GramLab Java IDE" SrcSectionGramLab
    ;SectionIn 1
    ;SetDetailsPrint textonly
    ;DetailPrint "Installing Source Code | GramLab Java IDE..."
    ;SetDetailsPrint listonly

    ;# GramLab Java IDE source
    ;setOutPath "$INSTDIR\${SRC_DIRNAME}"
    ;# FIXME(martinec) currently this file is not available
    ;;File "${INPUT_SRCDIR}/GramLab.zip"

    ;# GramLab Java IDE SVN Log
    ;setOutPath "$INSTDIR\${SRC_DIRNAME}"
    ;file /nonfatal "${INPUT_SRCDIR}/log_svn_Gramlab.txt"
  ;${MementoSectionEnd}
SectionGroupEnd  # SrcSection
!else   # -DSETUP_NO_SOURCES_SECTION
  # This is a workaround to preserve the installation indices returned by
  # GetCurInstType
  Section -HideSrcSection
      SectionIn 1
  SectionEnd  # -HideSrcSection
!endif  # SETUP_NO_SOURCES_SECTION

# =============================================================================
# User Manual
# Remove this section from the final build passing -DSETUP_NO_MANUAL_SECTION
# =============================================================================
!ifndef SETUP_NO_MANUAL_SECTION
SectionGroup "User Manual"                    ManSection
  ${MementoSection}  "English"                ManSectionEN
    SectionIn 1 2 3
    SetDetailsPrint textonly
    DetailPrint "Installing User Manual | English version..."
    SetDetailsPrint listonly

    SetOutPath "$INSTDIR\${APP_DIRNAME}\manual\en"

    # Files added here should be removed by the uninstaller
    # (see section "Uninstall")
    #     /oname=UnitexManual${VER_MAJOR}.${VER_MINOR}.pdf
    File "/oname=UnitexManual.pdf" "${INPUT_MANDIR}/en/UnitexManual.pdf"

    # Store manual (Manual_en.last) Last Changed Date info
    # FIXME(martinec) Actually Manual_en.last doesn't currently exist in the
    # /checkout folder
    ;${WriteRegLastChangedInfo} "Manual_en" "${APP_MAN_KEY}\en"
  ${MementoSectionEnd}

  ${MementoSection}  "French"                 ManSectionFR
    SectionIn 1
    SetDetailsPrint textonly
    DetailPrint "Installing User Manual | French version..."
    SetDetailsPrint listonly

    SetOutPath "$INSTDIR\${APP_DIRNAME}\manual\fr"
    
    # Files added here should be removed by the uninstaller
    # (see section "Uninstall")
    #    "/oname=ManuelUnitex${VER_MAJOR}.${VER_MINOR}.pdf"
    File "/oname=ManuelUnitex.pdf" "${INPUT_MANDIR}/fr/UnitexManual.pdf"

    # Store manual (Manual_fr.last) Last Changed Date info
    # FIXME(martinec) Actually Manual_fr.last doesn't currently exist in the
    # /checkout folder
    ;${WriteRegLastChangedInfo} "Manual_fr" "${APP_MAN_KEY}\fr"
  ${MementoSectionEnd}
SectionGroupEnd  # ManSection
!else   # -DSETUP_NO_MANUAL_SECTION
  # This is a workaround to preserve the installation indices returned by
  # GetCurInstType
  Section -HideManSection
      SectionIn 1 2 3
  SectionEnd  # -HideManSection
!endif  # SETUP_NO_MANUAL_SECTION

# =============================================================================
# Start Menu and Desktop Shortcuts
# =============================================================================
${MementoSection}  "Start Menu and Desktop Shortcuts"  LnkSection
    SectionIn 1 2 3
${MementoSectionEnd}  # LnkSection

# It's mandatory to call ${MementoSectionDone} after the last ${MementoSection}
${MementoSectionDone}

# =============================================================================
# Post installation hide section.
# =============================================================================
Section -PostFileInstallation
  Call CreateShortcuts
  Call CreateRegistryKeys

  SetOutPath $INSTDIR

	# Write uninstaller
  # See function un.onInit and section "Uninstall" for configuration
	writeUninstaller "$INSTDIR\${UNINSTALLER_FILE}"

  #
  ${MementoSectionSave}

  SetDetailsPrint both
SectionEnd  # -PostFileInstallation

# =============================================================================
# A dummy section trick to save the LastSectionIndex
# ${LastSectionIndex} variable is used in the GetInstalledSize function
# Notice that this hide section is supposed to be the last one !
# =============================================================================
Section -DummyLastSection LastSectionIndex
SectionEnd  # LastSectionIndex

# =============================================================================
# GetInstalledSize
# Return on top of stack the total size of the selected (installed) sections,
# formated as DWORD. ${LastSectionIndex} is defined at DummyLastSection section
# This is an improved version of
# @see http://nsis.sourceforge.net/Add_uninstall_information_to_Add/Remove_Programs
# =============================================================================
Function GetInstalledSize
	Push $0
	Push $1
	StrCpy $GetInstalledSize.total 0
	${ForEach} $1 0 ${LastSectionIndex} + 1
		${if} ${SectionIsSelected} $1
			SectionGetSize $1 $0
			IntOp $GetInstalledSize.total $GetInstalledSize.total + $0
		${Endif}
	${Next}

	ClearErrors
	Pop $1
	Pop $0
	IntFmt $GetInstalledSize.total "0x%08X" $GetInstalledSize.total
	Push $GetInstalledSize.total
FunctionEnd  # GetInstalledSize

# =============================================================================
# CreateShortcuts
# =============================================================================
Function CreateShortcuts
  ${If} ${SectionIsSelected} ${LnkSection}
    SetDetailsPrint textonly
    DetailPrint "Installing Start Menu and Desktop Shortcuts..."
    SetDetailsPrint listonly

    # Start Menu directory
    createDirectory "$SMPROGRAMS\${STARTMENUFOLDER}"

    # Only if at least one IDE section was selected
    # we need to check if jre_bin_path is defined
    ${If}   ${SectionIsSelected} ${IDESectionUnitex}
    ${OrIf} ${SectionIsSelected} ${IDESectionGramLab}
      # StrCmp str1 str2 jump_if_equal [jump_if_not_equal]
      StrCmp $java_bin_path "" 0 jre_bin_path_is_already_defined
        StrCpy $java_bin_path "javaw.exe"
      jre_bin_path_is_already_defined:
    ${endif}

    # Unitex.jar shortcut
    # This shortcut should be removed by the uninstaller (see section "Uninstall")
    ${If} ${SectionIsSelected} ${IDESectionUnitex}
      # Start Menu Shortcut
      SetOutPath     "$SMPROGRAMS\${STARTMENUFOLDER}"
      CreateShortCut "$SMPROGRAMS\${STARTMENUFOLDER}\${UNITEX_JAVA_NAME}.lnk"    \
                     "$java_bin_path"                                            \
                     "-jar $\"$INSTDIR\${APP_DIRNAME}\${UNITEX_JAVA_FILE}$\" \
                      $\"$INSTDIR\${APP_DIRNAME}$\""                             \
                     "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"                      \
                     0

      # Desktop  Shortcut
      SetOutPath     "$DESKTOP"
      CreateShortCut "$DESKTOP\${UNITEX_JAVA_NAME}.lnk"                          \
                     "$java_bin_path"                                            \
                     "-jar $\"$INSTDIR\${APP_DIRNAME}\${UNITEX_JAVA_FILE}$\" \
                      $\"$INSTDIR\${APP_DIRNAME}$\""                             \
                     "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"                      \
                     0
    ${EndIf}   # IDESectionUnitex

    # GramLab.jar shortcut
    # This shortcut should be removed by the uninstaller (see section "Uninstall")
    ${If} ${SectionIsSelected} ${IDESectionGramLab}
      # Start Menu Shortcut
      SetOutPath     "$SMPROGRAMS\${STARTMENUFOLDER}"
      CreateShortCut "$SMPROGRAMS\${STARTMENUFOLDER}\${GRAMLAB_JAVA_NAME}.lnk"    \
                     "$java_bin_path"                                             \
                     "-jar $\"$INSTDIR\${APP_DIRNAME}\${GRAMLAB_JAVA_FILE}$\" \
                      $\"$INSTDIR\${APP_DIRNAME}$\""                              \
                     "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"                       \
                     0
      # Desktop  Shortcut
      SetOutPath     "$DESKTOP"
      CreateShortCut "$DESKTOP\${GRAMLAB_JAVA_NAME}.lnk"                          \
                     "$java_bin_path"                                             \
                     "-jar $\"$INSTDIR\${APP_DIRNAME}\${GRAMLAB_JAVA_FILE}$\" \
                      $\"$INSTDIR\${APP_DIRNAME}$\""                              \
                     "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"                       \
                     0
    ${EndIf}  # IDESectionGramLab

    # Manual Shortcuts
    # All shortcuts added here will be automatically removed by the uninstaller
    !ifndef SETUP_NO_MANUAL_SECTION
      # English manual shortcut
      ${If} ${SectionIsSelected} ${ManSectionEN}
        SetOutPath      "$SMPROGRAMS\${STARTMENUFOLDER}\Manual"
        CreateShortCut  "$SMPROGRAMS\${STARTMENUFOLDER}\Manual\Unitex Manual \
                         (english version).lnk"                              \
                        "$INSTDIR\${APP_DIRNAME}\manual\en\UnitexManual.pdf"
      ${EndIf}  # ManSectionEN

      # French manual shortcut
      ${If} ${SectionIsSelected} ${ManSectionFR}
        SetOutPath      "$SMPROGRAMS\${STARTMENUFOLDER}\Manual"
        CreateShortCut  "$SMPROGRAMS\${STARTMENUFOLDER}\Manual\Manuel Unitex \
                         (french version).lnk"                               \
                        "$INSTDIR\${APP_DIRNAME}\manual\fr\ManuelUnitex.pdf"
      ${EndIf}  # ManSectionFR
    !endif  # SETUP_NO_MANUAL_SECTION

    # Links Shortcuts
    # All .url shortcuts added here will be automatically removed by the uninstaller
    SetOutPath           "$SMPROGRAMS\${STARTMENUFOLDER}\Links"

    # Homepage
    ${CreateWebShortCut} "$SMPROGRAMS\${STARTMENUFOLDER}\Links\Homepage.url"      \
                         "${HOMEPAGE_URL}"

    # Forum
    ${CreateWebShortCut} "$SMPROGRAMS\${STARTMENUFOLDER}\Links\Forum.url"         \
                         "${FORUM_URL}"

    # Bug Reporting
    ${CreateWebShortCut} "$SMPROGRAMS\${STARTMENUFOLDER}\Links\Bug Reporting.url" \
                         "${BUG_URL}"

    # Uninstall shortcut
    SetOutPath           "$SMPROGRAMS\${STARTMENUFOLDER}"
    CreateShortCut       "$SMPROGRAMS\${STARTMENUFOLDER}\${UNINSTALLER_NAME}.lnk" \
                         "$INSTDIR\${UNINSTALLER_FILE}"                           \
                         ""                                                       \
                         "$INSTDIR\${UNINSTALLER_FILE}"                           \
                         0
  ${EndIf}  # LnkSection
FunctionEnd  # CreateShortcuts

# =============================================================================
# CreateRegistryKeys
# =============================================================================
Function CreateRegistryKeys
  SetDetailsPrint textonly
  DetailPrint "Creating Registry Keys..."
  SetDetailsPrint listonly

  # Store installation folder
  WriteRegStr SHCTX "${INSTALL_SETTINGS_KEY}"                             \
                    "${MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_VALUENAME}" \
                    "$INSTDIR"

  # Store installation mode (AllUsers or CurrentUser)
  WriteRegStr SHCTX "${INSTALL_SETTINGS_KEY}"                             \
                    "${MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_VALUENAME}" \
                    "$MultiUser.InstallMode"

  # Store setup Last Changed Date
  WriteRegStr SHCTX "${INSTALL_SETTINGS_KEY}"                             \
                    "${INSTALL_BUILD_DATE_REGISTRY_VALUENAME}"            \
                    "${SETUP_BUILD_DATE}"

  # Store version information
  # Unitex/GramLab doesn't use version build number, we only use major, minor
  # and revision number
  !ifdef VER_MAJOR & VER_MINOR & VER_REVISION
    WriteRegDword SHCTX "${APP_REGISTRY_KEY}" "VersionMajor"    "${VER_MAJOR}"
    WriteRegDword SHCTX "${APP_REGISTRY_KEY}" "VersionMinor"    "${VER_MINOR}"
    !ifdef ANONYMOUS_BUILD
      # Anonymous builds have -1 as revision number
      WriteRegDword SHCTX "${APP_REGISTRY_KEY}" "VersionRevision" -1
    !else  # Non anonymous build
      WriteRegDword SHCTX "${APP_REGISTRY_KEY}" "VersionRevision" "${VER_REVISION}"
    !endif
  !endif  # VER_MAJOR & VER_MINOR & VER_REVISION

  # Store flag indicating if version is stable or not
  !ifndef VER_UNSTABLE
    WriteRegDWORD SHCTX "${APP_REGISTRY_KEY}" "VersionStable"   1
  !else  # Stable version
    WriteRegDWORD SHCTX "${APP_REGISTRY_KEY}" "VersionStable"   0
  !endif  # VER_UNSTABLE

  # Store version suffix
  WriteRegStr SHCTX "${APP_REGISTRY_KEY}" "VersionSuffix"   "${VER_SUFFIX}"

  # Registry information for add/remove programs
  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "DisplayName"          \
                    "${PRETTYAPPCAPTION}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "UninstallString"      \
                    "$\"$INSTDIR\${UNINSTALLER_FILE}$\""

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "QuietUninstallString" \
                    "$\"$INSTDIR\${UNINSTALLER_FILE}$\" /S"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "InstallLocation"      \
                    "$INSTDIR"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "DisplayIcon"          \
                    "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "Publisher"            \
                    "${COMPANYNAME}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "HelpLink"             \
                    "${FORUM_URL}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "URLUpdateInfo"        \
                    "${UPDATE_URL}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "URLInfoAbout"         \
                    "${ABOUT_URL}"

  WriteRegStr SHCTX "${UNINSTALL_SETTINGS_KEY}" "DisplayVersion"       \
                    "${VERSION}"

!ifdef VER_MAJOR & VER_MINOR
  WriteRegDWORD SHCTX "${UNINSTALL_SETTINGS_KEY}" "VersionMajor"       \
                      "${VER_MAJOR}"

  WriteRegDWORD SHCTX "${UNINSTALL_SETTINGS_KEY}" "VersionMinor"       \
                      "${VER_MINOR}"
!endif

  # There is no option for modifying or repairing the install
	WriteRegDWORD SHCTX "${UNINSTALL_SETTINGS_KEY}" "NoModify"           1
	WriteRegDWORD SHCTX "${UNINSTALL_SETTINGS_KEY}" "NoRepair"           1

  # Set the  Computing EstimatedSize constant so Add/Remove Programs can
  # accurately report the size
  Call GetInstalledSize
  Pop $0
  WriteRegDWORD SHCTX "${UNINSTALL_SETTINGS_KEY}" "EstimatedSize"      "$0"
FunctionEnd # CreateRegistryKeys

# =============================================================================
# Check for installer updates
# =============================================================================
!ifdef VER_MAJOR & VER_MINOR & VER_REVISION
Function PageCheckUpdate
# TODO(martinec) Check for installer updates
FunctionEnd

Function PageLeaveCheckUpdate
FunctionEnd
!endif  # VER_MAJOR & VER_MINOR & VER_REVISION

# =============================================================================
# This is adapted from the PageReinstall function of the Makensis.nsi example
# @source Makensis.nsi file example
# =============================================================================
!ifdef VER_MAJOR & VER_MINOR & VER_REVISION

Var ReinstallPageCheck

Function PageReinstall
  ReadRegStr $R0 SHCTX ${APP_REGISTRY_KEY}       ""
  ReadRegStr $R1 SHCTX ${UNINSTALL_SETTINGS_KEY} "UninstallString"
  ${IfThen} "$R0$R1" == "" ${|} Abort ${|}

  StrCpy $R4 "older"

  # Unitex/GramLab doesn't use version build number, we only use major,
  # minor and revision numbers
  ReadRegDWORD $R0 SHCTX ${APP_REGISTRY_KEY} "VersionMajor"
  ReadRegDWORD $R1 SHCTX ${APP_REGISTRY_KEY} "VersionMinor"
  ReadRegDWORD $R2 SHCTX ${APP_REGISTRY_KEY} "VersionRevision"

  # Anonymous builds have -1 as revision number
  ${IfThen} $R2 = -1 ${|} StrCpy $R4 "unknown" ${|}
  StrCpy $R0 $R0.$R1.$R2.0

  ${VersionCompare} ${VER_MAJOR}.${VER_MINOR}.${VER_REVISION}.0 $R0 $R0

  ; $R0=0  Versions are equal
  ${If} $R0 == 0
    StrCpy $R1 "${PRETTYAPPCAPTION} is already installed. Select the operation \
                you want to perform and click Next to continue."
    StrCpy $R2 "Add/Reinstall components"
    StrCpy $R3 "Uninstall ${PRETTYAPPNAME}"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose the maintenance \
                                  option to perform."
    StrCpy $R0 "2"

  ; $R0=1  Installed version is older
  ${ElseIf} $R0 == 1
    StrCpy $R1 "An $R4 version of ${PRETTYAPPNAME} is installed on your system. \
                It's recommended that you uninstall the current version before \
                installing. Select the operation you want to perform and click \
                Next to continue."
    StrCpy $R2 "Uninstall before installing"
    StrCpy $R3 "Do not uninstall"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose how you want to \
                                  install ${PRETTYAPPNAME}."
    StrCpy $R0 "1"

  ; $R0=1  Installed version is newer
  ${ElseIf} $R0 == 2
    StrCpy $R1 "A newer version of ${PRETTYAPPNAME} is already installed! It is \
                not recommended that you install an older version. If you really \
                want to install this older version, it's better to uninstall the \
                current version first. Select the operation you want to perform \
                and click Next to continue."
    StrCpy $R2 "Uninstall before installing"
    StrCpy $R3 "Do not uninstall"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose how you want to \
                                  install ${PRETTYAPPNAME}."
    StrCpy $R0 "1"
  ${Else}
    Abort
  ${EndIf}

  nsDialogs::Create 1018
  Pop $R4

  ${NSD_CreateLabel} 0 0 100% 24u $R1
  Pop $R1

  ${NSD_CreateRadioButton} 30u 50u -30u 8u $R2
  Pop $R2
  ${NSD_OnClick} $R2 PageReinstallUpdateSelection

  ${NSD_CreateRadioButton} 30u 70u -30u 8u $R3
  Pop $R3
  ${NSD_OnClick} $R3 PageReinstallUpdateSelection

  ${If} $ReinstallPageCheck != 2
    SendMessage $R2 ${BM_SETCHECK} ${BST_CHECKED} 0
  ${Else}
    SendMessage $R3 ${BM_SETCHECK} ${BST_CHECKED} 0
  ${EndIf}

  ${NSD_SetFocus} $R2

  nsDialogs::Show

FunctionEnd

Function PageReinstallUpdateSelection

  Pop $R1

  ${NSD_GetState} $R2 $R1

  ${If} $R1 == ${BST_CHECKED}
    StrCpy $ReinstallPageCheck 1
  ${Else}
    StrCpy $ReinstallPageCheck 2
  ${EndIf}

FunctionEnd

Function PageLeaveReinstall

  ${NSD_GetState} $R2 $R1

  StrCmp $R0 "1" 0 +2 ; Existing install is not the same version?
    StrCmp $R1 "1" reinst_uninstall reinst_done

  StrCmp $R1 "1" reinst_done ; Same version, skip to add/reinstall components?

  reinst_uninstall:
  ReadRegStr $R1 SHCTX ${UNINSTALL_SETTINGS_KEY} "UninstallString"

  # Run uninstaller
    HideWindow

    ClearErrors
    ExecWait '$R1 _?=$INSTDIR' $0

    BringToFront

    ${IfThen} ${Errors} ${|} StrCpy $0 2 ${|} ; ExecWait failed, set fake exit code

    ${If} $0 <> 0
    ${OrIf} ${FileExists} "$INSTDIR\${APP_DIRNAME}\Unitex.ico"
      ${If} $0 = 1 ; User aborted uninstaller?
        StrCmp $R0 "2" 0 +2 ; Is the existing install the same version?
          Quit ; ...yes, already installed, we are done
        Abort
      ${EndIf}
      MessageBox MB_ICONEXCLAMATION "Uninstall of ${PRETTYAPPNAME} failed!"
      Abort
    ${Else}
      StrCpy $0 $R1 1
      # Strip quotes from UninstallString
      ${IfThen} $0 == '"' ${|} StrCpy $R1 $R1 -1 1 ${|}
      Delete $R1
      RMDir $INSTDIR
    ${EndIf}

  reinst_done:

FunctionEnd

!endif # VER_MAJOR & VER_MINOR & VER_REVISION

function MUI_PAGE_INSTFILES_PreFunction
  ${If}   ${SectionIsSelected} ${IDESectionUnitex}
  ${OrIf} ${SectionIsSelected} ${IDESectionGramLab}
  #check internet connection
  ${endif}
functionEnd

function MUI_PAGE_INSTFILES_LeaveFunction
  IfAbort 0 successful_install
  # TODO(martinec)  Installation failed, try to remove already installed files
successful_install:
functionEnd

# Called when the user hits the 'cancel' button after the install has failed
# Function .onInstFailed
#  MessageBox MB_OK "Better luck next time."
# FunctionEnd

# =============================================================================
# MUI_PAGE_FINISH_ShowFunction
# =============================================================================
Var RunUnitexRadioButton
Var RunGramLabRadioButton
function MUI_PAGE_FINISH_ShowFunction
  # Hide the run application checkbox
  ShowWindow  $mui.FinishPage.Run 0

  # Add a radio button to launch the Unitex Classic IDE
  ${If}   ${SectionIsSelected} ${IDESectionUnitex}
  	${NSD_CreateRadioButton} 180 110u 70% 12u "Launch the ${UNITEX_JAVA_NAME}"
  	Pop $RunUnitexRadioButton
    SetCtlColors $RunUnitexRadioButton "" "${MUI_BGCOLOR}"
  	${NSD_Check} $RunUnitexRadioButton
  ${endif}

  # Add a radio button to launch the Unitex GramLab IDE
  ${If}   ${SectionIsSelected} ${IDESectionGramLab}
  	${NSD_CreateRadioButton} 180 125u 70% 12u "Launch the ${GRAMLAB_JAVA_NAME}"
  	Pop $RunGramLabRadioButton
    SetCtlColors $RunGramLabRadioButton "" "${MUI_BGCOLOR}"
    ${IfNot}   ${SectionIsSelected} ${IDESectionUnitex}
  	 ${NSD_Check} $RunGramLabRadioButton
    ${endif} 
  ${endif}
functionEnd

# =============================================================================
# Function
# =============================================================================
Function RunUnitexGramLab
  # Check if a user asks to run the Unitex Classic IDE
  ${NSD_GetState} $RunUnitexRadioButton  $R0
  ${If} $R0 == ${BST_CHECKED}
    ExecShell "" "$SMPROGRAMS\${STARTMENUFOLDER}\${UNITEX_JAVA_NAME}.lnk"
  ${endif}

  # Check if a user asks to run the Unitex GramLab IDE
  ${NSD_GetState} $RunGramLabRadioButton $R0
  ${If} $R0 == ${BST_CHECKED}
    ExecShell "" "$SMPROGRAMS\${STARTMENUFOLDER}\${GRAMLAB_JAVA_NAME}.lnk"
  ${endif}
FunctionEnd

# Every command from StrFunc.nsh used in install sections and functions have
# to be called first before and out of any sections and functions, and without
# parameters. StrLoc is used inside SetLocaleOptions. SetLocaleOptions is called
# from the .OnInit function.
${StrLoc}

# =============================================================================
# SetLocaleOptions
# Try to get all sections names, if a section name match, even partially, the
# contents of $locale_language_name, this section will be available in all
# installation types (Full, Standard and Minimal). e.g. if the system language
# is French, French Language Resources will be default checked in all modes.
# =============================================================================
function SetLocaleOptions
	Push $0
	Push $1

	${ForEach} $0 0 ${LastSectionIndex} + 1
    SectionGetText $0 $1
    ${StrLoc} $1 "$1" "$locale_language_name" "<"
    ${If} $1 != ""
      # Each bit represents an installation type
      #
      # +------------------------------+
      # | Install type activation flag |
      # +------------------------------+
      # 7                              0
      #
      # We need to active all installation types (Full, Standard and Minimal)
      # i.e. 00000111 in binary or 7 in decimal .
      SectionSetInstTypes $0 7
    ${EndIf}
	${Next}

  ClearErrors
	Pop $1
	Pop $0
functionEnd

# =============================================================================
# onInit
# This function must be located below all sections
# =============================================================================
function .onInit
  # Allow only one installer instance
  !define INSTALLER_UUID "{37F45C0C-CA04-474F-9B69-CEDC50162BEF}"
  System::Call 'kernel32::CreateMutex(i 0, i 0, t "${INSTALLER_UUID}") i .r1 ?e'
  Pop $0
  StrCmp $0 0 +3
    MessageBox MB_ICONSTOP|MB_TOPMOST "The ${PRETTYAPPNAME} installer is \
                                       already running."
    Quit

  # Initialize global variables
  ${InitGlobals}

  # Verify user privileges
  # see http://nsis.sourceforge.net/Docs/MultiUser/Readme.html
  !insertmacro MULTIUSER_INIT

  # Show setup installer Splash Screen
  !ifdef SETUP_SHOW_SPLASH_SCREEN
    call SplashScreen
  !endif

  call GetLocaleLanguageName

  call SetLocaleOptions

  # Sets the current InstType to Standard
  # SetCurInstType InstType parameter is 0-index based and only takes into
  # account the effective installation types, i.e. if you have two types
  # including the same sections, there will be only one index for both of them
  # Check memento
  SetCurInstType 1

  # Restore previous settings
  ${MementoSectionRestore}
functionEnd

# =============================================================================
# Descriptions
# =============================================================================

# Language strings

# Core Section
LangString DESC_CoreSection     ${LANG_ENGLISH} \
 "The core files required to use ${PRETTYAPPNAME}."

# IDE Section
LangString DESC_IDESection      ${LANG_ENGLISH} \
 "${PRETTYAPPNAME} Visual Integrated Environments."

# Language Resources Section
LangString DESC_LangResSection  ${LANG_ENGLISH} \
 "${PRETTYAPPNAME} Language Resources."

# Code Source Section
!ifndef SETUP_NO_SOURCES_SECTION
LangString DESC_SrcSection      ${LANG_ENGLISH} \
 "${PRETTYAPPNAME} Code Source."
!endif  # SETUP_NO_SOURCES_SECTION

# Manuals Section
!ifndef SETUP_NO_MANUAL_SECTION
  LangString DESC_ManSection    ${LANG_ENGLISH} \
 "${PRETTYAPPNAME} localized Manuals."
!endif  # SETUP_NO_MANUAL_SECTION

# Shortcuts Section
LangString DESC_LnkSection      ${LANG_ENGLISH} \
 "Adds icons to your start menu and your desktop for easy access."

# Assign language strings to sections
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  # Core Section
  !insertmacro MUI_DESCRIPTION_TEXT   ${CoreSection}      $(DESC_CoreSection)
  # IDE Section
  !insertmacro MUI_DESCRIPTION_TEXT   ${IDESection}       $(DESC_IDESection)
  # Language Resources Section
  !insertmacro MUI_DESCRIPTION_TEXT   ${LangResSection}   $(DESC_LangResSection)
  # Code Source Section
  !ifndef SETUP_NO_SOURCES_SECTION
    !insertmacro MUI_DESCRIPTION_TEXT ${SrcSection}       $(DESC_SrcSection)
  !endif  # SETUP_NO_SOURCES_SECTION
  # Manuals Section
  !ifndef SETUP_NO_MANUAL_SECTION
    !insertmacro MUI_DESCRIPTION_TEXT ${ManSection}       $(DESC_ManSection)
  !endif  # SETUP_NO_MANUAL_SECTION
  # Shortcuts Section
  !insertmacro MUI_DESCRIPTION_TEXT   ${LnkSection}       $(DESC_LnkSection)
!insertmacro MUI_FUNCTION_DESCRIPTION_END

# =============================================================================
# @ Unistaller Sections
# =============================================================================

# =============================================================================
# Uninstall
# =============================================================================
Section "Uninstall"
  SetDetailsPrint textonly
  DetailPrint "Uninstalling ${PRETTYAPPNAME}..."
  SetDetailsPrint listonly

  ; check if is installed
  IfFileExists "$INSTDIR\${APP_DIRNAME}\Unitex.ico" already_installed
    MessageBox MB_YESNO "It does not appear that ${PRETTYAPPNAME} is installed \
    in the directory '$INSTDIR'.${NEW_LINE}Continue anyway (not recommended)?" \
    IDYES already_installed
    Abort "Uninstall aborted by user"
  already_installed:

  ; remove shortcuts
  Call un.CleanShortCuts

  ; remove registry keys
  Call un.CleanRegistryKeys

  ; remove files
  Call un.CleanFiles

  ; remove directories
  Call un.CleanDirectories

  # Always delete uninstaller as the last action
  SetDetailsPrint textonly
  DetailPrint "Deleting uninstaller..."
  SetDetailsPrint listonly
	delete "$INSTDIR\${UNINSTALLER_FILE}"

  # Try to remove the install directory, this will only happen if it is empty
  # Never never set /r flag, this is extremely unsafe !
  SetDetailsPrint textonly
  DetailPrint "Deleting installation directory (only if empty)..."
  SetDetailsPrint listonly
  rmDir "$INSTDIR"

  # Sets mode at which commands print their status as both (list and text)
  SetDetailsPrint both
sectionEnd

# =============================================================================
# @ Uninstaller Functions
# =============================================================================

# =============================================================================
# un.onInit
# this function must be located below all uninstaller sections
# =============================================================================
function un.onInit
  # Allow only one uninstaller instance
  !define UNINSTALLER_UUID "{A4750FFA-6D3C-4BE7-AB26-9863AD249943}"
  System::Call 'kernel32::CreateMutex(i 0, i 0, t "${UNINSTALLER_UUID}") i .r1 ?e'
  Pop $0
  StrCmp $0 0 +3
    MessageBox MB_ICONSTOP|MB_TOPMOST "The ${PRETTYAPPNAME} uninstaller is \
                                       already running."
    Quit

  # Initialize global variables
  ${InitGlobals}

  # verify user privileges
  # see http://nsis.sourceforge.net/Docs/MultiUser/Readme.html
  !insertmacro MULTIUSER_UNINIT

  ;!insertmacro VerifyUserIsAdmin

  # Get the stored language preference
  !insertmacro MUI_UNGETLANGUAGE

	# Sets the context of $SMPROGRAMS to the 'all users' shell folder.
  # Only admins have full access rights to the all users area.
  # Multiuser
  # SetShellVarContext all

	# Last chance to back out
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to \
     completely remove ${PRETTYAPPCAPTION} and all of its components?" IDYES +2
  Abort
functionEnd

# =============================================================================
# un.CleanShortCuts
# remove shortcuts
# =============================================================================
Function un.CleanShortCuts
  # Test if the start menu folder exists
  IfFileExists "$SMPROGRAMS\${STARTMENUFOLDER}\*.*" 0 NoStartmenuFolder

  SetDetailsPrint textonly
  DetailPrint "Deleting Shortcuts..."
  SetDetailsPrint listonly

  # Remove Start Menu launcher
  delete "$SMPROGRAMS\${STARTMENUFOLDER}\${UNITEX_JAVA_NAME}.lnk"
  delete "$DESKTOP\${UNITEX_JAVA_NAME}.lnk"

  delete "$SMPROGRAMS\${STARTMENUFOLDER}\${GRAMLAB_JAVA_NAME}.lnk"
	delete "$DESKTOP\${GRAMLAB_JAVA_NAME}.lnk"

  # Remove all .lnk manual shortcuts
  !ifndef SETUP_NO_MANUAL_SECTION
   delete "$SMPROGRAMS\${STARTMENUFOLDER}\Manual\*.lnk"
   # try to remove the Start Menu Manual folder
   # this will only happen if it is empty
   rmDir  "$SMPROGRAMS\${STARTMENUFOLDER}\Manual"
  !endif  # SETUP_NO_MANUAL_SECTION

  # Remove all .url web shortcuts
  delete "$SMPROGRAMS\${STARTMENUFOLDER}\Links\*.url"
  # try to remove the Start Menu Links folder
  # this will only happen if it is empty
  rmDir  "$SMPROGRAMS\${STARTMENUFOLDER}\Links"

  # Remove uninstaller shortcut
  delete "$SMPROGRAMS\${STARTMENUFOLDER}\${UNINSTALLER_NAME}.lnk"

  # Finally, try to remove the Start Menu folder
  # this will only happen if it is empty
	rmDir "$SMPROGRAMS\${STARTMENUFOLDER}"

NoStartmenuFolder:
FunctionEnd

# =============================================================================
# un.CleanRegistryKeys
# remove registry keys
# =============================================================================
Function un.CleanRegistryKeys
  SetDetailsPrint textonly
  DetailPrint "Deleting Registry Keys..."
  SetDetailsPrint listonly

  # Remove
  !ifndef SETUP_NO_MANUAL_SECTION
   DeleteRegKey SHCTX ${APP_MAN_KEY}
  !endif  # SETUP_NO_MANUAL_SECTION

  # Remove
  DeleteRegKey SHCTX ${APP_LANGRES_KEY}

  # Remove
  DeleteRegKey SHCTX ${APP_IDE_KEY}

  # Remove
  DeleteRegKey SHCTX ${APP_CORE_KEY}

  # Remove memento installer information from the registry
  DeleteRegKey SHCTX ${INSTALL_MEMENTO_KEY}

  # Remove installer information from the registry
  DeleteRegKey SHCTX ${INSTALL_SETTINGS_KEY}

  # Remove application key
  # /ifempty : the registry key will only be deleted if it has no subkeys
  # Never never try to delete the application root key whitout /ifempty flag,
  # this is extremely unsafe !
  DeleteRegKey /ifempty SHCTX ${APP_REGISTRY_KEY}

  # Remove uninstaller information from the registry
	DeleteRegKey SHCTX ${UNINSTALL_SETTINGS_KEY}
FunctionEnd

# =============================================================================
# un.CleanFiles
# Remove files
# =============================================================================
Function un.CleanFiles
  SetDetailsPrint textonly
  DetailPrint "Deleting Core Files..."
  SetDetailsPrint listonly

  delete "$INSTDIR\README.TXT"
  delete "$INSTDIR\${APP_DIRNAME}\Apache-1.1.txt"
  delete "$INSTDIR\${APP_DIRNAME}\BSD_tre.txt"
  delete "$INSTDIR\${APP_DIRNAME}\Disclaimer.txt"
  delete "$INSTDIR\${APP_DIRNAME}\Disclaimer-Gramlab.txt"
  delete "$INSTDIR\${APP_DIRNAME}\${GRAMLAB_JAVA_FILE}"
  delete "$INSTDIR\${APP_DIRNAME}\gramlab_revision.date"
  delete "$INSTDIR\${APP_DIRNAME}\${LGPL_FILE}"
  delete "$INSTDIR\${APP_DIRNAME}\${LGPLLR_FILE}"
  delete "$INSTDIR\${APP_DIRNAME}\pom.xml"
  delete "$INSTDIR\${APP_DIRNAME}\revision.date"
  delete "$INSTDIR\${APP_DIRNAME}\svnkitclient.jar"
  delete "$INSTDIR\${APP_DIRNAME}\${ICON_FILE}"
  delete "$INSTDIR\${APP_DIRNAME}\${UNITEX_JAVA_FILE}"
  delete "$INSTDIR\${APP_DIRNAME}\Unitex1.ico"
  delete "$INSTDIR\${APP_DIRNAME}\UnitexToolLogger.exe"
  delete "$INSTDIR\${APP_DIRNAME}\XAlign.jar"
  delete "$INSTDIR\${APP_DIRNAME}\xercesImpl.jar"
  delete "$INSTDIR\${APP_DIRNAME}\xml-apis.jar"

  # Remove Language Resources
  Call un.CleanLangResFiles
FunctionEnd

# =============================================================================
# un.CleanLangResFiles
# Remove Language Resources
# =============================================================================
Function un.CleanLangResFiles
  SetDetailsPrint textonly
  DetailPrint "Removing Language Resources..."
  SetDetailsPrint listonly

  !tempfile "_SHELL_SCRIPT_TEMP_FILE"

  # this is to produce two consecutive backslashes : '\\'
  !define ESCAPED_BACKSLASH "echo $\'92$\' | awk $\'{ printf $\"%c%c$\",$0,$0 ;}$\'"

  # this is to produce a back-slash (\) followed by a dollar symbol ($)   : '\$'
  !define ESCAPED_DOLLAR    "echo $\'92$\' | awk $\'{ printf $\"%c$$\",$0 ;}$\'"

  # this is to produce a dollar symbol ($) followed by a back-slash (\) : '$\'
  !define ESCAPED_SEQUENCE  "echo $\'92$\' | awk $\'{ printf $\"$%c%c$\",$0,$0 ;}$\'"

  # reverse file contents (last line first) using 'tac' command
  # replace "${INPUT_UNITEXDIR}/" by "$INSTDIR"
  # replace slashes (/) by  back-slashes (\)
  # replace "setOutPath" by "rmDir"
  # replace "file" by "delete"
  !define SHELL_SCRIPT_GET_LIST_LANGRES_TO_REMOVE      '\
   tac "${LANGRES_INSTALLED_FILES_LIST}"              | \
   sed -e $\'s:${INPUT_UNITEXDIR}/:$INSTDIR/:$\'      | \
   tr $\"/$\" $\"$(${ESCAPED_BACKSLASH})$\"           | \
   sed -e $\'s:^setOutPath:rmDir       :$\'           | \
   sed -e $\'s:^file:delete:$\'                         \
   > "${_SHELL_SCRIPT_TEMP_FILE}"                       \
   '
  !system  '${SHELL_SCRIPT_GET_LIST_LANGRES_TO_REMOVE}'  = 0
  !include '${_SHELL_SCRIPT_TEMP_FILE}'
  !delfile '${_SHELL_SCRIPT_TEMP_FILE}'

  !undef SHELL_SCRIPT_GET_LIST_LANGRES_TO_REMOVE
  !undef ESCAPED_SEQUENCE
  !undef ESCAPED_DOLLAR
  !undef ESCAPED_BACKSLASH

  !undef _SHELL_SCRIPT_TEMP_FILE

  !delfile "${LANGRES_INSTALLED_FILES_LIST}"
  !undef   LANGRES_INSTALLED_FILES_LIST
FunctionEnd

# =============================================================================
# un.CleanDirectories
# Remove directories
# =============================================================================
Function un.CleanDirectories
  SetDetailsPrint textonly
  DetailPrint "Deleting directories..."
  SetDetailsPrint listonly

  # recursive (/r) remove the \XAlign directory
  SetDetailsPrint textonly
  DetailPrint "Deleting directories | \${XALIGN_DIRNAME}..."
  SetDetailsPrint listonly
  rmDir /r "$INSTDIR\${XALIGN_DIRNAME}"

  # recursive (/r) remove the \App\manual directory
  !ifndef SETUP_NO_MANUAL_SECTION
    SetDetailsPrint textonly
    DetailPrint "Deleting directories | \${APP_DIRNAME}\manual..."
    SetDetailsPrint listonly
    rmDir /r "$INSTDIR\${APP_DIRNAME}\manual"
  !endif  # SETUP_NO_MANUAL_SECTION

  # recursive (/r) remove the \App\assembly directory
  SetDetailsPrint textonly
  DetailPrint "Deleting directories | \${APP_DIRNAME}\assembly..."
  SetDetailsPrint listonly
  rmDir /r "$INSTDIR\${APP_DIRNAME}\assembly"

  # Try to remove the \App directory, this will only happen if it is empty
  # Never set /r flag, this is not safe !
  SetDetailsPrint textonly
  DetailPrint "Deleting directories | \${APP_DIRNAME} (only if empty)..."
  SetDetailsPrint listonly
	rmDir "$INSTDIR\${APP_DIRNAME}"

  # recursive (/r) remove the \Src directory
  !ifndef SETUP_NO_SOURCES_SECTION
    SetDetailsPrint textonly
    DetailPrint "Deleting directories | \${SRC_DIRNAME}..."
    SetDetailsPrint listonly
    rmDir /r "$INSTDIR\${SRC_DIRNAME}"
  !endif

  # Try to remove the \Users directory, this will only happen if it is empty
  # Don't try to set /r flag, we want to preserve user data
  SetDetailsPrint textonly
  DetailPrint "Deleting directories | \${USR_DIRNAME} (only if empty)..."
  SetDetailsPrint listonly
  rmDir "$INSTDIR\${USR_DIRNAME}"

  # The $INSTDIR directory will be deleted at the end of the Uninstall section
FunctionEnd
# =============================================================================

# =============================================================================
# Installer signing
# =============================================================================
!ifdef FINALIZE_SIGN_FILE
  !finalize 'bash signcode.sh "%1"'
!endif  # FINALIZE_SIGN_FILE

# =============================================================================
# Compile-time final build commands
# =============================================================================
!if "${OUTPUT_SETUP_DIR}" != "."
  # Try to create the output directory where MakeNSIS will write the installer
  !finalize 'mkdir -p "${OUTPUT_SETUP_DIR}"'
  # !finalize execute a command using a call to system() after the output EXE
  # has been generated.

  # Move the final setup installer to ${OUTPUT_SETUP_DIR}
  # ./releases/3.0/win32/Unitex-GramLab-3.0_win32-setup.exe
  # ./releases/3.1beta/win32/Unitex-GramLab-3.1beta_win32-setup.exe
  !finalize 'mv -f "${OUTPUT_SETUP_NAME}" "${OUTPUT_SETUP_FILE}"'

  !verbose push
  !verbose 4
  !echo '[info] Output moved to $\"${OUTPUT_SETUP_FILE}$\"'
  !verbose pop

  # Update the /release/latest(-${VER_SUFFIX}) symbolic links
  # Allows this using makensis -DFINALIZE_UPDATE_LATEST_LINK unitex.nsi
  !ifdef FINALIZE_UPDATE_LATEST_LINK
    !if "${VER_SUFFIX}" == ""
      !define LATEST_SYMBOLIC_LINK_DIR '${OUTPUT_RELEASES_DIR}/latest'
    !else
      !define LATEST_SYMBOLIC_LINK_DIR '${OUTPUT_RELEASES_DIR}/latest-${VER_SUFFIX}'
    !endif

    # Notice that ${LATEST_SYMBOLIC_LINK_DIR} is a symbolic link file, not a directory.
    !finalize 'rm  -f "${LATEST_SYMBOLIC_LINK_DIR}"'
    !finalize 'ln -sf "${OUTPUT_THIS_RELEASE_DIR}" "${LATEST_SYMBOLIC_LINK_DIR}"'

    !verbose push
    !verbose 4
    !echo '[info] Directory "${LATEST_SYMBOLIC_LINK_DIR}" is now symbolically \
           mapped to "${OUTPUT_THIS_RELEASE_DIR}"'
    !verbose pop
  !endif # FINALIZE_UPDATE_LATEST_LINK
!endif  # "${OUTPUT_SETUP_DIR}" != "."

# Calculate the MD5 signature of the binary installer
# avoid this using makensis -DFINALIZE_NO_MD5SUM_FILE unitex.nsi
!ifndef FINALIZE_NO_MD5SUM_FILE
  !finalize  'md5sum "${OUTPUT_SETUP_FILE}" |\
              sed -e $\'s:${OUTPUT_SETUP_DIR}/::$\' \
              > "${OUTPUT_SETUP_DIR}/${OUTPUT_SETUP_NAME}.md5"'
  !verbose push
  !verbose 4
  !echo '[info] MD5 signature file saved to $\"${OUTPUT_SETUP_DIR}/${OUTPUT_SETUP_NAME}.md5$\"'
  !verbose pop
!endif

# Calculate the SHA1 signature of the binary installer
# Allow this using makensis -DFINALIZE_SHA1SUM_FILE unitex.nsi
!ifdef FINALIZE_SHA1SUM_FILE
  !finalize  'sha1sum "${OUTPUT_SETUP_FILE}" |\
              sed -e $\'s:${OUTPUT_SETUP_DIR}/::$\' \
              > "${OUTPUT_SETUP_DIR}/${OUTPUT_SETUP_NAME}.sha1"'
  !verbose push
  !verbose 4
  !echo '[info] SHA1 signature file saved to $\"${OUTPUT_SETUP_DIR}/\
         ${OUTPUT_SETUP_NAME}.sha1$\"'
  !verbose pop
!endif

!ifndef SETUP_NO_CHECKOUT_INFO
# Try to create a file named Setup_${VER_SUFFIX}_win${BITS}.last inside the
# /checkout directory containing the last date when the setup was
# successfully compiled
!define SETUP_CHECKOUT_FILE "${INPUT_CHKDIR}/Setup_${VER_SUFFIX}_win${BITS}.last"
# if VER_SUFFIX is empty replace the double underscore with a
# single-underscore
!searchreplace SETUP_CHECKOUT_FILE "${SETUP_CHECKOUT_FILE}" __ _
!finalize  'echo "${SETUP_BUILD_DATE}" > "${SETUP_CHECKOUT_FILE}"'
!verbose push
!verbose 4
!echo '[info] Last changed timestamp ($\"${SETUP_BUILD_DATE}$\") \
       saved to "${SETUP_CHECKOUT_FILE}"'
!verbose pop
!endif  # SETUP_NO_CHECKOUT_INFO
